This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitattributes
.gitignore
build.gradle
docker-compose.yml
Dockerfile
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
README.md
settings.gradle
src/main/java/com/example/memory_guard/analysis/domain/AbstractOverallAnalysis.java
src/main/java/com/example/memory_guard/analysis/domain/DementiaAnalysis.java
src/main/java/com/example/memory_guard/analysis/domain/FeedbackType.java
src/main/java/com/example/memory_guard/analysis/domain/FinalFeedback.java
src/main/java/com/example/memory_guard/analysis/domain/SentenceAnalysisIndicators.java
src/main/java/com/example/memory_guard/analysis/dto/AiEvaluateApiResponse.java
src/main/java/com/example/memory_guard/analysis/dto/FinalFeedbackResponseDto.java
src/main/java/com/example/memory_guard/analysis/dto/OverallAnalysisResponseDto.java
src/main/java/com/example/memory_guard/analysis/dto/SentenceAnalysisIndicatorsDto.java
src/main/java/com/example/memory_guard/analysis/dto/SentenceAnalysisResponseDto.java
src/main/java/com/example/memory_guard/analysis/repository/FinalFeedbackRepository.java
src/main/java/com/example/memory_guard/analysis/repository/OverallAnalysisRepository.java
src/main/java/com/example/memory_guard/analysis/repository/SentenceAnalysisRepository.java
src/main/java/com/example/memory_guard/analysis/service/AudioAnalysisService.java
src/main/java/com/example/memory_guard/analysis/service/FinalFeedbackService.java
src/main/java/com/example/memory_guard/analysis/service/SentenceAnalysisService.java
src/main/java/com/example/memory_guard/analysis/strategy/AudioAnalysisStrategy.java
src/main/java/com/example/memory_guard/analysis/strategy/DementiaAnalysisStrategy.java
src/main/java/com/example/memory_guard/audio/controller/AudioController.java
src/main/java/com/example/memory_guard/audio/controller/QuestionController.java
src/main/java/com/example/memory_guard/audio/domain/AbstractAudioMetadata.java
src/main/java/com/example/memory_guard/audio/domain/AudioTranscription.java
src/main/java/com/example/memory_guard/audio/domain/LocalAudioMetadata.java
src/main/java/com/example/memory_guard/audio/dto/request/AudioAnalysisRequestDto.java
src/main/java/com/example/memory_guard/audio/dto/request/SpeakSentenceRequestDto.java
src/main/java/com/example/memory_guard/audio/dto/response/AudioAnalysisReport.java
src/main/java/com/example/memory_guard/audio/dto/response/AudioSaveResponseDto.java
src/main/java/com/example/memory_guard/audio/dto/response/AudioSaveResultDto.java
src/main/java/com/example/memory_guard/audio/dto/response/AudioStampResponseDto.java
src/main/java/com/example/memory_guard/audio/dto/response/AudioTranscriptionResponseDto.java
src/main/java/com/example/memory_guard/audio/dto/response/QuestionResponseDto.java
src/main/java/com/example/memory_guard/audio/dto/response/SpeakSentenceResponseDto.java
src/main/java/com/example/memory_guard/audio/repository/AudioMetadataRepository.java
src/main/java/com/example/memory_guard/audio/repository/AudioTranscriptionRepository.java
src/main/java/com/example/memory_guard/audio/service/AudioService.java
src/main/java/com/example/memory_guard/audio/service/AudioStorageService.java
src/main/java/com/example/memory_guard/audio/strategy/AudioSaveStrategy.java
src/main/java/com/example/memory_guard/audio/strategy/LocalAudioSaveStrategy.java
src/main/java/com/example/memory_guard/audio/utils/AudioConversionUtils.java
src/main/java/com/example/memory_guard/audio/utils/AudioUtils.java
src/main/java/com/example/memory_guard/diary/controller/DiaryController.java
src/main/java/com/example/memory_guard/diary/domain/Diary.java
src/main/java/com/example/memory_guard/diary/dto/DiaryAudioInfoDto.java
src/main/java/com/example/memory_guard/diary/dto/DiaryContentDto.java
src/main/java/com/example/memory_guard/diary/dto/DiaryInfoDto.java
src/main/java/com/example/memory_guard/diary/dto/DiaryResponseDto.java
src/main/java/com/example/memory_guard/diary/repository/DiaryRepository.java
src/main/java/com/example/memory_guard/diary/service/DiaryService.java
src/main/java/com/example/memory_guard/global/ai/AiModelClient.java
src/main/java/com/example/memory_guard/global/ai/GeminiClient.java
src/main/java/com/example/memory_guard/global/auth/dto/TokenDto.java
src/main/java/com/example/memory_guard/global/auth/filter/JwtAuthenticationFilter.java
src/main/java/com/example/memory_guard/global/auth/utils/JwtProvider.java
src/main/java/com/example/memory_guard/global/config/DataInitializer.java
src/main/java/com/example/memory_guard/global/config/SecurityConfig.java
src/main/java/com/example/memory_guard/global/exception/custom/AuthenticationException.java
src/main/java/com/example/memory_guard/global/exception/custom/InvalidRequestException.java
src/main/java/com/example/memory_guard/global/exception/ErrorResponse.java
src/main/java/com/example/memory_guard/global/exception/GlobalExceptionHandler.java
src/main/java/com/example/memory_guard/global/MainController.java
src/main/java/com/example/memory_guard/guard/controller/GuardController.java
src/main/java/com/example/memory_guard/guard/dto/GuardCalendarResponseDto.java
src/main/java/com/example/memory_guard/guard/dto/GuardHomeResponseDto.java
src/main/java/com/example/memory_guard/guard/dto/GuardManagementResponseDto.java
src/main/java/com/example/memory_guard/guard/dto/GuardReportResponseDto.java
src/main/java/com/example/memory_guard/guard/dto/GuardSettingResponseDto.java
src/main/java/com/example/memory_guard/guard/service/GuardService.java
src/main/java/com/example/memory_guard/SpringMemoryGuard.java
src/main/java/com/example/memory_guard/user/controller/UserController.java
src/main/java/com/example/memory_guard/user/controller/UserSettingController.java
src/main/java/com/example/memory_guard/user/domain/GuardRequest.java
src/main/java/com/example/memory_guard/user/domain/GuardUserLink.java
src/main/java/com/example/memory_guard/user/domain/Role.java
src/main/java/com/example/memory_guard/user/domain/Status.java
src/main/java/com/example/memory_guard/user/domain/User.java
src/main/java/com/example/memory_guard/user/domain/UserProfile.java
src/main/java/com/example/memory_guard/user/dto/GuardManagementResponseDto.java
src/main/java/com/example/memory_guard/user/dto/GuardRequestDto.java
src/main/java/com/example/memory_guard/user/dto/GuardSignupRequestDto.java
src/main/java/com/example/memory_guard/user/dto/GuardUserDto.java
src/main/java/com/example/memory_guard/user/dto/LoginRequestDto.java
src/main/java/com/example/memory_guard/user/dto/LoginResponseDto.java
src/main/java/com/example/memory_guard/user/dto/SignupRequestDto.java
src/main/java/com/example/memory_guard/user/dto/UserExistResponseDto.java
src/main/java/com/example/memory_guard/user/dto/WardHomeResponseDto.java
src/main/java/com/example/memory_guard/user/dto/WardUserDto.java
src/main/java/com/example/memory_guard/user/repository/GuardRequestRepository.java
src/main/java/com/example/memory_guard/user/repository/GuardUserLinkRepository.java
src/main/java/com/example/memory_guard/user/repository/RoleRepository.java
src/main/java/com/example/memory_guard/user/repository/UserRepository.java
src/main/java/com/example/memory_guard/user/service/UserService.java
src/main/java/com/example/memory_guard/user/service/UserSettingService.java
src/main/resources/application-dev.properties
src/main/resources/application-prod.properties
src/main/resources/application.properties
src/main/resources/templates/guard-login.html
src/main/resources/templates/main.html
src/main/resources/templates/user-login.html
src/test/java/com/example/memory_guard/controller/AudioControllerTest.java
src/test/java/com/example/memory_guard/controller/DiaryControllerTest.java
src/test/java/com/example/memory_guard/controller/UserControllerTest.java
src/test/java/com/example/memory_guard/entity/UserTest.java
src/test/java/com/example/memory_guard/repository/DiaryRepositoryTest.java
src/test/java/com/example/memory_guard/repository/UserRepositoryTest.java
src/test/java/com/example/memory_guard/service/AudioServiceTest.java
src/test/java/com/example/memory_guard/service/DiaryServiceTest.java
src/test/java/com/example/memory_guard/service/UserServiceTest.java
src/test/java/com/example/memory_guard/utils/jwt/JwtProviderTest.java
src/test/resources/application-test.properties
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
/gradlew text eol=lf
*.bat text eol=crlf
*.jar binary
</file>

<file path="gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.3-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
</file>

<file path="gradlew">
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
</file>

<file path="gradlew.bat">
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega
</file>

<file path="settings.gradle">
rootProject.name = 'SpringMemoryGuard'
</file>

<file path="src/main/java/com/example/memory_guard/analysis/domain/AbstractOverallAnalysis.java">
package com.example.memory_guard.analysis.domain;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

@Entity
@Getter
@NoArgsConstructor
@EntityListeners(AuditingEntityListener.class)
public abstract class AbstractOverallAnalysis {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "audio_metadata_id", nullable = false)
  private AbstractAudioMetadata audioMetadata;

  @Enumerated(EnumType.STRING)
  @Column(name = "feedback_type", nullable = false)
  private FeedbackType feedbackType;

  @Column(name = "score")
  private double score;

  @CreatedDate
  @Column(name = "created_at", updatable = false)
  private LocalDateTime createdAt;

  public AbstractOverallAnalysis(AbstractAudioMetadata audioMetadata, FeedbackType feedbackType) {
    this.audioMetadata = audioMetadata;
    this.feedbackType = feedbackType;
  }

  public AbstractOverallAnalysis(AbstractAudioMetadata audioMetadata, FeedbackType feedbackType, double score) {
    this.audioMetadata = audioMetadata;
    this.feedbackType = feedbackType;
    this.score = score;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/domain/FeedbackType.java">
package com.example.memory_guard.analysis.domain;

import lombok.Getter;

@Getter
public enum FeedbackType {
  DEMENTIA("치매 위험도 분석");

  private final String description;

  FeedbackType(String description) {
    this.description = description;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/domain/FinalFeedback.java">
package com.example.memory_guard.analysis.domain;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
public class FinalFeedback {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(nullable = false)
  private String title;

  @Lob
  @Column(nullable = false, columnDefinition = "TEXT")
  private String content;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "audio_metadata_id", nullable = false)
  private AbstractAudioMetadata audioMetadata;
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/domain/SentenceAnalysisIndicators.java">
package com.example.memory_guard.analysis.domain;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
public class SentenceAnalysisIndicators {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(nullable = false)
  private String category;

  @Lob
  @Column(nullable = false, columnDefinition = "TEXT")
  private String comment;

  @Lob
  @Column(columnDefinition = "TEXT")
  private String exampleOriginal;

  @Lob
  @Column(columnDefinition = "TEXT")
  private String exampleSuggestion;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "audio_metadata_id", nullable = false)
  private AbstractAudioMetadata audioMetadata;
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/dto/AiEvaluateApiResponse.java">
package com.example.memory_guard.analysis.dto;


import lombok.Data;

@Data
public class AiEvaluateApiResponse {
  private boolean success;
  private String message;
  private OverallAnalysisResponseDto data;
  private String error;
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/dto/FinalFeedbackResponseDto.java">
package com.example.memory_guard.analysis.dto;

import com.example.memory_guard.analysis.domain.FinalFeedback;
import lombok.Builder;
import lombok.Getter;

import java.util.List;

@Getter
@Builder
public class FinalFeedbackResponseDto {
  private List<FinalFeedbackItemDto> finalFeedbacks;

  @Getter
  @Builder
  public static class FinalFeedbackItemDto {
    private String title;
    private String content;

    public static FinalFeedbackItemDto from(FinalFeedback finalFeedback) {
      return FinalFeedbackItemDto.builder()
          .title(finalFeedback.getTitle())
          .content(finalFeedback.getContent())
          .build();
    }
  }

  public static FinalFeedbackResponseDto from(List<FinalFeedback> finalFeedbacks) {
    List<FinalFeedbackItemDto> feedbackItems = finalFeedbacks.stream()
        .map(FinalFeedbackItemDto::from)
        .toList();

    return FinalFeedbackResponseDto.builder()
        .finalFeedbacks(feedbackItems)
        .build();
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/dto/SentenceAnalysisIndicatorsDto.java">
package com.example.memory_guard.analysis.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.util.List;

@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class SentenceAnalysisIndicatorsDto {
  @JsonProperty("linguistic_feedback")
  private List<FeedbackItem> linguisticFeedback;

  @Getter
  @Setter
  @NoArgsConstructor
  public static class FeedbackItem {
    @JsonProperty("category")
    private String category;

    @JsonProperty("comment")
    private String comment;

    @JsonProperty("example_original")
    private String exampleOriginal;

    @JsonProperty("example_suggestion")
    private String exampleSuggestion;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/dto/SentenceAnalysisResponseDto.java">
package com.example.memory_guard.analysis.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class SentenceAnalysisResponseDto {
    private String audioText;
    private SentenceAnalysisIndicatorsDto feedbacks;
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/repository/FinalFeedbackRepository.java">
package com.example.memory_guard.analysis.repository;

import com.example.memory_guard.analysis.domain.FinalFeedback;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface FinalFeedbackRepository extends JpaRepository<FinalFeedback, Long> {
  List<FinalFeedback> findByAudioMetadataId(Long audioMetadataId);
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/repository/OverallAnalysisRepository.java">
package com.example.memory_guard.analysis.repository;

import com.example.memory_guard.analysis.domain.AbstractOverallAnalysis;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface OverallAnalysisRepository extends JpaRepository<AbstractOverallAnalysis, Long> {
    List<AbstractOverallAnalysis> findByAudioMetadataId(Long audioMetadataId);
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/repository/SentenceAnalysisRepository.java">
package com.example.memory_guard.analysis.repository;

import com.example.memory_guard.analysis.domain.SentenceAnalysisIndicators;
import org.springframework.data.jpa.repository.JpaRepository;

public interface SentenceAnalysisRepository extends JpaRepository<SentenceAnalysisIndicators, Long> {
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/service/FinalFeedbackService.java">
package com.example.memory_guard.analysis.service;

import com.example.memory_guard.analysis.domain.FinalFeedback;
import com.example.memory_guard.analysis.domain.SentenceAnalysisIndicators;
import com.example.memory_guard.analysis.dto.FinalFeedbackResponseDto;
import com.example.memory_guard.analysis.repository.FinalFeedbackRepository;
import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.global.ai.GeminiClient;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional(readOnly = true)
public class FinalFeedbackService {

  private final FinalFeedbackRepository finalFeedbackRepository;
  private final GeminiClient geminiClient;

  @Transactional
  public FinalFeedbackResponseDto generateAndSaveFinalFeedback(AbstractAudioMetadata audioMetadata) throws IOException {
    List<SentenceAnalysisIndicators> sentenceAnalysisIndicators = audioMetadata.getSentenceAnalysisIndicators();
    
    if (sentenceAnalysisIndicators == null || sentenceAnalysisIndicators.isEmpty()) {
      throw new IllegalArgumentException("문장 분석 결과가 없습니다.");
    }

    StringBuilder analysisText = new StringBuilder();
    for (SentenceAnalysisIndicators indicator : sentenceAnalysisIndicators) {
      analysisText.append("카테고리: ").append(indicator.getCategory()).append("\n");
      analysisText.append("코멘트: ").append(indicator.getComment()).append("\n");
      if (indicator.getExampleOriginal() != null) {
        analysisText.append("원본 예시: ").append(indicator.getExampleOriginal()).append("\n");
      }
      if (indicator.getExampleSuggestion() != null) {
        analysisText.append("개선 제안: ").append(indicator.getExampleSuggestion()).append("\n");
      }
      analysisText.append("\n");
    }

    String finalFeedbackText = geminiClient.generateFinalFeedback(analysisText.toString());
    
    List<FinalFeedback> finalFeedbacks = parseFinalFeedback(finalFeedbackText, audioMetadata);
    
    List<FinalFeedback> savedFeedbacks = finalFeedbackRepository.saveAll(finalFeedbacks);
    
    return FinalFeedbackResponseDto.from(savedFeedbacks);
  }

  public FinalFeedbackResponseDto getFinalFeedback(Long audioId) {
    List<FinalFeedback> finalFeedbacks = finalFeedbackRepository.findByAudioMetadataId(audioId);
    return FinalFeedbackResponseDto.from(finalFeedbacks);
  }

  private List<FinalFeedback> parseFinalFeedback(String feedbackText, AbstractAudioMetadata audioMetadata) {
    List<FinalFeedback> finalFeedbacks = new ArrayList<>();
    
    String[] lines = feedbackText.split("\n");
    
    for (String line : lines) {
      line = line.trim();
      if (line.isEmpty()) continue;
      
      if (line.contains(":")) {
        String[] parts = line.split(":", 2);
        if (parts.length == 2) {
          String title = parts[0].trim();
          String content = parts[1].trim();
          
          FinalFeedback finalFeedback = FinalFeedback.builder()
              .title(title)
              .content(content)
              .audioMetadata(audioMetadata)
              .build();
          
          finalFeedbacks.add(finalFeedback);
        }
      }
    }
    
    return finalFeedbacks;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/service/SentenceAnalysisService.java">
package com.example.memory_guard.analysis.service;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.domain.AudioTranscription;
import com.example.memory_guard.analysis.domain.SentenceAnalysisIndicators;
import com.example.memory_guard.analysis.dto.SentenceAnalysisResponseDto;
import com.example.memory_guard.analysis.dto.SentenceAnalysisIndicatorsDto;
import com.example.memory_guard.audio.repository.AudioTranscriptionRepository;
import com.example.memory_guard.analysis.repository.SentenceAnalysisRepository;
import com.example.memory_guard.global.ai.GeminiClient;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class SentenceAnalysisService {

  private final GeminiClient geminiService;
  private final AudioTranscriptionRepository audioTranscriptionRepository;
  private final SentenceAnalysisRepository sentenceAnalysisRepository;

  @Transactional
  public SentenceAnalysisResponseDto analyzeSentence(AbstractAudioMetadata audioMetadata) throws IOException {
      AudioTranscription transcription = audioTranscriptionRepository.findByAudioMetadataId(audioMetadata.getId())
          .orElseThrow(() -> new IllegalStateException("해당 음성파일에 대한 텍스트파일을 찾을 수 없습니다."));

      SentenceAnalysisIndicatorsDto sentenceAnalysisIndicators = geminiService.getLinguisticFeedback(transcription.getText());

      if (isValidAnalysisIndicator(audioMetadata, sentenceAnalysisIndicators, transcription))
        return SentenceAnalysisResponseDto.builder()
            .audioText(transcription.getText())
            .feedbacks(null)
            .build();

      List<SentenceAnalysisIndicators> feedbacks = createFeedback(audioMetadata, sentenceAnalysisIndicators);
      sentenceAnalysisRepository.saveAll(feedbacks);

      log.info("{}개의 언어적 피드백을 저장했습니다. Audio ID: {}", feedbacks.size(), audioMetadata.getId());

      return SentenceAnalysisResponseDto.builder()
          .audioText(transcription.getText())
          .feedbacks(sentenceAnalysisIndicators)
          .build();
  }

  private static boolean isValidAnalysisIndicator(AbstractAudioMetadata audioMetadata, SentenceAnalysisIndicatorsDto sentenceAnalysisIndicators, AudioTranscription transcription) {
    if (sentenceAnalysisIndicators.getLinguisticFeedback() == null || sentenceAnalysisIndicators.getLinguisticFeedback().isEmpty()) {
      log.info("언어적 피드백 항목이 발견되지 않았습니다. Audio ID: {}", audioMetadata.getId());
      return true;
    }
    return false;
  }

  private static List<SentenceAnalysisIndicators> createFeedback(AbstractAudioMetadata audioMetadata, SentenceAnalysisIndicatorsDto feedbackResponse) {
    return feedbackResponse.getLinguisticFeedback().stream()
        .map(item -> SentenceAnalysisIndicators.builder()
            .category(item.getCategory()) // [침묵], [문장흐름]...
            .comment(item.getComment()) // ______때문에 적절하지 못 하다.
            .exampleOriginal(item.getExampleOriginal()) // 이 부분이 잘 못 됐다.
            .exampleSuggestion(item.getExampleSuggestion()) // 이렇게 수정하라
            .audioMetadata(audioMetadata)
            .build())
            .collect(Collectors.toList());
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/strategy/AudioAnalysisStrategy.java">
package com.example.memory_guard.analysis.strategy;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.analysis.domain.AbstractOverallAnalysis;
import com.example.memory_guard.user.domain.User;

import java.io.IOException;

public interface AudioAnalysisStrategy {
  AbstractOverallAnalysis evaluate(AbstractAudioMetadata metadata, User user) throws IOException;
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/strategy/DementiaAnalysisStrategy.java">
package com.example.memory_guard.analysis.strategy;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.analysis.domain.AbstractOverallAnalysis;
import com.example.memory_guard.analysis.domain.DementiaAnalysis;
import com.example.memory_guard.analysis.dto.OverallAnalysisResponseDto;
import com.example.memory_guard.audio.repository.AudioTranscriptionRepository;
import com.example.memory_guard.global.ai.AiModelClient;
import com.example.memory_guard.user.domain.User;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
@Slf4j
@RequiredArgsConstructor
public class DementiaAnalysisStrategy implements AudioAnalysisStrategy {

  private final ObjectMapper objectMapper;
  private final AudioTranscriptionRepository audioTranscriptionRepository;
  private final AiModelClient aiModelClient;

  @Override
  public AbstractOverallAnalysis evaluate(AbstractAudioMetadata metadata, User user) throws IOException {
    OverallAnalysisResponseDto evaluateResponseDto = aiModelClient.analyzeAudio(metadata);

    log.info("AI 모델로부터 온 응답: {}", evaluateResponseDto);
    return createDementiaFeedback(metadata, evaluateResponseDto);
  }

  private static DementiaAnalysis createDementiaFeedback(AbstractAudioMetadata metadata, OverallAnalysisResponseDto evaluateResponseDto) {
    return DementiaAnalysis.builder().audioMetadata(metadata)
        .avgSilenceDuration(evaluateResponseDto.getAvgSilenceDuration())
        .fillerFrequency(evaluateResponseDto.getFillerFrequency())
        .repetitionRatio(evaluateResponseDto.getRepetitionRatio())
        .speakingRate(evaluateResponseDto.getSpeakingRate())
        .vocabularyAccuracy(evaluateResponseDto.getVocabularyAccuracy())
        .utteranceVolume(evaluateResponseDto.getUtteranceVolume())
        .score(evaluateResponseDto.getScore())
        .build();
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/domain/AudioTranscription.java">
package com.example.memory_guard.audio.domain;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
public class AudioTranscription {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Lob
  @Column(nullable = false, columnDefinition = "TEXT")
  private String text;

  @OneToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "audio_metadata_id", nullable = false, unique = true)
  private AbstractAudioMetadata audioMetadata;
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/dto/request/AudioAnalysisRequestDto.java">
package com.example.memory_guard.audio.dto.request;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class AudioAnalysisRequestDto {

  private String audioData;
  private String filename;

}
</file>

<file path="src/main/java/com/example/memory_guard/audio/dto/request/SpeakSentenceRequestDto.java">
package com.example.memory_guard.audio.dto.request;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SpeakSentenceRequestDto {

  private String audioData;
  private String filename;
  private String sentence;

}
</file>

<file path="src/main/java/com/example/memory_guard/audio/dto/response/AudioAnalysisReport.java">
package com.example.memory_guard.audio.dto.response;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class AudioAnalysisReport {

    private double speakingRate;
    private double utteranceVolume;
    private double avgSilenceDuration;
    private double vocabularyAccuracy;
    private double fillerFrequency;
    private double repetitionRatio;
    private double dementiaProbability;

    private double avgRecordingTime;
    private int attendanceRate;
    private double avgScore;
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/dto/response/AudioSaveResponseDto.java">
package com.example.memory_guard.audio.dto.response;

import lombok.Builder;
import lombok.Data;
import lombok.Getter;

@Data
@Builder
@Getter
public class AudioSaveResponseDto {

  private Long audioId;
  private int consecutiveRecordingDays;
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/dto/response/AudioSaveResultDto.java">
package com.example.memory_guard.audio.dto.response;

import com.example.memory_guard.user.domain.User;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class AudioSaveResultDto {
    private Long audioId;
    private User user;
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/dto/response/AudioStampResponseDto.java">
package com.example.memory_guard.audio.dto.response;

import lombok.Builder;
import lombok.Getter;

import java.time.LocalDate;
import java.util.List;

@Getter
public class AudioStampResponseDto {
  private final int consecutiveRecordingDays;
  private final List<LocalDate> weeklyStamps;

  @Builder
  public AudioStampResponseDto(int consecutiveRecordingDays, List<LocalDate> weeklyStamps) {
    this.consecutiveRecordingDays = consecutiveRecordingDays;
    this.weeklyStamps = weeklyStamps;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/dto/response/AudioTranscriptionResponseDto.java">
package com.example.memory_guard.audio.dto.response;


import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
public class AudioTranscriptionResponseDto {

  private Long audioId;
  private String audioText;

  @Builder
  public AudioTranscriptionResponseDto(Long audioId, String audioText){
    this.audioId = audioId;
    this.audioText = audioText;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/dto/response/QuestionResponseDto.java">
package com.example.memory_guard.audio.dto.response;

public class QuestionResponseDto {
  private String question;

  public QuestionResponseDto(String question) {
    this.question = question;
  }

  public String getQuestion() {
    return question;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/dto/response/SpeakSentenceResponseDto.java">
package com.example.memory_guard.audio.dto.response;

import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class SpeakSentenceResponseDto {

  private double synchronization;

}
</file>

<file path="src/main/java/com/example/memory_guard/audio/repository/AudioTranscriptionRepository.java">
package com.example.memory_guard.audio.repository;

import com.example.memory_guard.audio.domain.AudioTranscription;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface AudioTranscriptionRepository extends JpaRepository<AudioTranscription, Long> {
  Optional<AudioTranscription> findByAudioMetadataId(Long audioMetadataId);
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/strategy/AudioSaveStrategy.java">
package com.example.memory_guard.audio.strategy;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.user.domain.User;
import org.springframework.web.multipart.MultipartFile;

import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.File;
import java.io.IOException;

public interface AudioSaveStrategy {

  AbstractAudioMetadata save(File audioFile, User user) throws IOException, UnsupportedAudioFileException;
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/strategy/LocalAudioSaveStrategy.java">
package com.example.memory_guard.audio.strategy;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.domain.LocalAudioMetadata;
import com.example.memory_guard.audio.utils.AudioUtils;
import com.example.memory_guard.audio.utils.AudioConversionUtils;
import com.example.memory_guard.user.domain.User;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.UUID;

@Slf4j
@Component("localAudioSaveStrategy")
@RequiredArgsConstructor
public class LocalAudioSaveStrategy implements AudioSaveStrategy{

  @Value("${file.upload-dir}")
  private String permanentUploadDir;


  @Override
  public AbstractAudioMetadata save(File audioFile, User user) throws IOException, UnsupportedAudioFileException {
    Path uploadPath = Paths.get(permanentUploadDir);
    if (!Files.exists(uploadPath)) {
      Files.createDirectories(uploadPath);
    }

    String originalFilename = audioFile.getName();
    String uniqueFilename = UUID.randomUUID().toString() + ".wav";
    Path outputPath = uploadPath.resolve(uniqueFilename);

    try {
      Files.move(audioFile.toPath(), outputPath, StandardCopyOption.REPLACE_EXISTING);
    } catch (IOException e) {
      log.error("Failed to move file from {} to {}", audioFile.getAbsolutePath(), outputPath, e);
      throw e;
    }

    File savedFile = outputPath.toFile();
    int durationSeconds = AudioUtils.getAudioSecondTimeFromFile(savedFile);

    AbstractAudioMetadata metaData = LocalAudioMetadata.builder()
        .user(user)
        .originalFilename(originalFilename)
        .fileSize(savedFile.length())
        .duration((long) durationSeconds)
        .filePath(outputPath.toString())
        .build();

    log.info("Audio file moved and saved successfully: {}", outputPath);
    return metaData;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/diary/controller/DiaryController.java">
package com.example.memory_guard.diary.controller;

import com.example.memory_guard.diary.dto.DiaryResponseDto;
import com.example.memory_guard.diary.service.DiaryService;
import com.example.memory_guard.user.domain.User;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/ward")
@RequiredArgsConstructor
public class DiaryController {

    private final DiaryService diaryService;

    @GetMapping("/diarys")
    public ResponseEntity<List<DiaryResponseDto>> getUserDiaries(@AuthenticationPrincipal User user) {
        List<DiaryResponseDto> diaries = diaryService.getUserDiaries(user.getId());
        return ResponseEntity.ok(diaries);
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/diary/dto/DiaryAudioInfoDto.java">
package com.example.memory_guard.diary.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class DiaryAudioInfoDto {
    private Long audioId;
    private String title;
    private Long duration;
}
</file>

<file path="src/main/java/com/example/memory_guard/diary/dto/DiaryContentDto.java">
package com.example.memory_guard.diary.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
public class DiaryContentDto {

  @JsonProperty("title")
  private String title;

  @JsonProperty("body")
  private String body;
}
</file>

<file path="src/main/java/com/example/memory_guard/diary/dto/DiaryInfoDto.java">
package com.example.memory_guard.diary.dto;

import com.example.memory_guard.diary.domain.Diary;
import lombok.Builder;
import lombok.Getter;

import java.time.LocalDate;

@Getter
@Builder
public class DiaryInfoDto {
  private String title;
  private LocalDate createdAt;

  public static DiaryInfoDto fromEntity(Diary diary) {
    return DiaryInfoDto.builder()
        .title(diary.getTitle())
        .createdAt(diary.getCreatedAt().toLocalDate())
        .build();
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/diary/dto/DiaryResponseDto.java">
package com.example.memory_guard.diary.dto;

import com.example.memory_guard.diary.domain.Diary;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;

import java.time.LocalDate;

@Getter
public class DiaryResponseDto {
  private String title;
  private String body;
  private String authorName;
  private LocalDate writtenAt;

  @Builder
  public DiaryResponseDto(String title, String body, String authorName, LocalDate writtenAt){
    this.title = title;
    this.body =body;
    this.authorName = authorName;
    this.writtenAt = writtenAt;
  }

}
</file>

<file path="src/main/java/com/example/memory_guard/global/ai/GeminiClient.java">
package com.example.memory_guard.global.ai;

import com.example.memory_guard.analysis.dto.SentenceAnalysisIndicatorsDto;
import com.example.memory_guard.diary.dto.DiaryContentDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.genai.Client;
import com.google.genai.types.GenerateContentResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.IOException;

@Service
public class GeminiClient {

  private final String apiKey;
  private final ObjectMapper objectMapper;

  public GeminiClient(@Value("${ai.api.key}") String apiKey, ObjectMapper objectMapper) {
    this.apiKey = apiKey;
    this.objectMapper = objectMapper;
  }

  public SentenceAnalysisIndicatorsDto getLinguisticFeedback(String text) throws IOException {
    Client client = Client.builder().apiKey(apiKey).build();

    String prompt = "당신은 시니어의 대화 내용을 분석하여 따뜻하고 격려하는 방식으로 언어 습관에 대한 피드백을 제공하는 언어 코치입니다.\n" +
        "다음 [분석 카테고리]에 따라 주어진 텍스트를 분석하고, 반드시 [출력 규칙]을 준수하여 결과를 JSON 형식으로만 반환해야 합니다.\n\n" +
        "[분석 카테고리]\n" +
        "1. `말의 길이/흐름`: 문장 간의 연결이 자연스러운지, 이야기가 끊기지 않고 잘 이어지는지 분석합니다.\n" +
        "2. `침묵/끊김`: 대화 중 머뭇거리거나 말이 끊기는 부분이 있는지 확인합니다. (텍스트만으로는 분석이 어려우므로, '아...', '음...' 같은 표현을 단서로 활용하세요.)\n" +
        "3. `어휘 다양성`: 특정 단어(예: '조금', '정말')가 반복적으로 사용되는지 분석합니다.\n" +
        "4. `시제 일치`: 과거의 일을 이야기할 때 시제가 올바르게 사용되었는지 확인합니다. (예: '...하고 있어요' -> '...했어요')\n\n" +
        "[출력 규칙]\n" +
        "1. 응답은 `linguistic_feedback`이라는 단일 키를 가진 JSON 객체여야 합니다.\n" +
        "2. `linguistic_feedback`의 값은 피드백 객체들의 배열이어야 합니다.\n" +
        "3. 각 피드백 객체는 `category`, `comment`, `example_original`, `example_suggestion` 네 개의 키를 가져야 합니다.\n" +
        "   - `category`: [분석 카테고리] 중 하나.\n" +
        "   - `comment`: 해당 카테고리에 대한 전반적인 코멘트. 긍정적이고 격려하는 톤을 유지하세요.\n" +
        "   - `example_original`: 지적한 내용과 관련된 원본 텍스트 전부.\n" +
        "   - `example_suggestion`: 개선된 문장전부\n" +
        "4. 특정 카테고리에서 피드백할 내용이 없다면, 해당 카테고리는 결과에 포함하지 마세요.\n" +
        "5. 피드백할 내용이 전혀 없다면, 빈 배열을 값으로 반환해야 합니다. (예: `{\"linguistic_feedback\": []}`)\n" +
        "6. 다른 어떤 설명이나 인사 없이, 오직 JSON 객체만 응답해야 합니다.\n\n" +
        "[예시]\n" +
        "입력 텍스트: \"우리 초코도 밥을 잘 먹었어요. 공원까지 조금 걸었는데, 사람들이 많이 없어서 조용했어요. 점심에는 미역국을 조금 먹었고, TV를 조금 봤어요. 저녁에는 딸이랑 전화 통화를 하고 있어요.\"\n" +
        "출력 JSON:\n" +
        "{\n" +
        "  \"linguistic_feedback\": [\n" +
        "    {\n" +
        "      \"category\": \"어휘 다양성\",\n" +
        "      \"comment\": \"특정 단어가 반복되었어요. 같은 의미라도 다른 표현을 섞어보면 더 풍부한 어휘 사용이 돼요.\",\n" +
        "      \"example_original\": \"미역국을 조금 먹었고, TV를 조금 봤어요.\",\n" +
        "      \"example_suggestion\": \"‘식사로 미역국을 드셨어요’\"\n" +
        "    },\n" +
        "    {\n" +
        "      \"category\": \"시제 일치\",\n" +
        "      \"comment\": \"과거를 표현할 때는 ‘했어요’로 표현해요.\",\n" +
        "      \"example_original\": \"전화 통화를 하고 있어요.\",\n" +
        "      \"example_suggestion\": \"‘저녁에는 딸이랑 전화 통화를 했어요'\"\n" +
        "    }\n" +
        "  ]\n" +
        "}\n\n" +
        "이제 다음 텍스트를 분석하고 피드백을 제공해 주세요 그리고 이 피드백은 최대 5개까지만 만들어줘:\n" +
        "--- 텍스트 시작 ---\n" +
        text +
        "\n--- 텍스트 끝 ---";

    GenerateContentResponse response = client.models.generateContent("gemini-2.5-flash", prompt, null);
    String jsonResponse = response.text()
        .replace("```json", "")
        .replace("```", "")
        .trim();

    return objectMapper.readValue(jsonResponse, SentenceAnalysisIndicatorsDto.class);
  }

  public DiaryContentDto summarizeTextToDiary(String text) throws IOException {
    Client client = Client.builder().apiKey(apiKey).build();

    String prompt = "당신은 주어진 텍스트를 따뜻한 감성의 일기 형식으로 요약하는 전문가입니다.\n" +
        "다음 [규칙]에 따라 텍스트를 요약하고, 결과를 반드시 JSON 형식으로만 반환해야 합니다.\n\n" +
        "[규칙]\n" +
        "1. `title`: 텍스트의 핵심 주제를 나타내는 15자 이내의 간결한 제목이어야 합니다.\n" +
        "2. `body`: 텍스트의 주요 내용을 3개의 문장으로 요약해야 합니다. 각 문장은 줄바꿈(\\n)으로 끝나야 합니다.\n" +
        "3. 다른 설명이나 인사 없이, 오직 JSON 객체만 응답해야 합니다.\n\n" +
        "[예시]\n" +
        "입력 텍스트: \"음... 내가 어릴 때는 말이야, 동네 친구들이랑 딱지치기하고 구슬치기하고 그랬지. 저녁때 엄마가 밥 먹으라고 부를 때까지 시간 가는 줄 몰랐어. 그때 먹었던 김치찌개가 세상에서 제일 맛있었는데. 아, 그 시절이 그립네.\"\n" +
        "출력 JSON:\n" +
        "{\n" +
        "  \"title\": \"그리운 어린 시절\",\n" +
        "  \"body\": \"친구들과 해가 질 때까지 딱지치기를 하며 놀았다.\\n어머니가 끓여주시던 김치찌개 맛이 떠오른다.\\n그 시절의 소박한 행복이 문득 그리워지는 하루다.\"\n" +
        "}\n\n" +
        "이제 다음 텍스트를 요약해 주세요:\n" +
        "--- 텍스트 시작 ---\n" +
        text +
        "\n--- 텍스트 끝 ---";

    GenerateContentResponse response = client.models.generateContent("gemini-2.5-flash", prompt, null);
    String jsonResponse = response.text()
        .replace("```json", "")
        .replace("```", "")
        .trim();

    return objectMapper.readValue(jsonResponse, DiaryContentDto.class);
  }

  public String generateQuestion() {
    Client client =  Client.builder().apiKey(apiKey).build();

    String prompt = "너는 40~70대와 대화하는 따뜻하고 지혜로운 친구야.\n" +
        "아래 [주제]와 관련된 일상적인 질문을 **랜덤으로 딱 1개만** 생성해 줘.\n" +
        "\n" +
        "[주제]\n" +
        "- 학창 시절, 어린 시절의 추억\n" +
        "- 소소한 일상의 즐거움이나 습관\n" +
        "- 좋아했던 음식, 노래, 장소\n" +
        "- 문득 떠오르는 생각이나 감정\n" +
        "\n" +
        "**가장 중요한 규칙:**\n" +
        "다른 어떤 인사나 설명도 붙이지 마.\n" +
        "오직 간결하고 따뜻한 질문 '한 문장'만 결과로 보여줘.\n" +
        "\n" +
        "(좋은 예시)\n" +
        "- 학창 시절, 가장 친했던 친구에 대해 이야기해 주시겠어요?\n" +
        "- 요즘 가장 마음 편해지는 시간은 언제인가요?\n" +
        "- 문득 떠오르는, 가장 그리운 맛이 있나요?\n" +
        "\n" +
        "(나쁜 예시)\n" +
        "- 안녕하세요! 질문을 하나 드릴게요. 학창 시절, 가장 친했던 친구는 누구인가요?";

    GenerateContentResponse response =
        client.models.generateContent(
            "gemini-2.5-flash", prompt,null);

    return response.text();
  }

  public String generateFinalFeedback(String sentenceAnalysisText) throws IOException {
    Client client = Client.builder().apiKey(apiKey).build();

    String prompt = "당신은 시니어의 언어 분석 결과를 바탕으로 따뜻하고 격려하는 방식으로 최종 피드백을 제공하는 언어 전문가입니다.\n" +
        "주어진 문장 분석 결과들을 종합하여 다음 형식으로 피드백을 생성해주세요.\n\n" +
        "[출력 형식]\n" +
        "1. 반드시 \"오늘의 피드백:\"으로 시작하는 전반적인 피드백\n" +
        "2. 분석 결과 중에서 가장 개선이 필요한 한 가지 영역만 선택하여 구체적인 조언 제공\n\n" +
        "[예시]\n" +
        "오늘의 피드백: 전반적으로 하루의 일상을 차례대로 잘 표현해주셨어요. 특히 시간 순서에 따라 체계적으로 말씀하신 점이 인상적입니다.\n" +
        "어휘의 다양성: \"정말\"이라는 단어가 자주 사용되었네요. 다음에는 \"참으로\", \"무척\", \"매우\" 등의 다양한 표현을 사용해보시면 더 풍부한 어휘로 표현할 수 있을 거예요.\n\n" +
        "[규칙]\n" +
        "1. 격려하고 따뜻한 톤을 유지해주세요.\n" +
        "2. \"오늘의 피드백\"에서는 전반적인 평가와 긍정적인 부분을 먼저 언급해주세요.\n" +
        "3. 두 번째 피드백에서는 분석 결과 중 가장 개선이 필요한 한 가지만 선택해서 구체적인 조언을 제공해주세요.\n" +
        "4. 각 피드백은 줄바꿈으로 구분해주세요.\n" +
        "5. 총 2개의 피드백만 제공해주세요.\n\n" +
        "다음은 분석 결과입니다:\n" +
        "--- 분석 결과 시작 ---\n" +
        sentenceAnalysisText +
        "\n--- 분석 결과 끝 ---";

    GenerateContentResponse response = client.models.generateContent("gemini-2.5-flash", prompt, null);
    return response.text().trim();
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/global/auth/dto/TokenDto.java">
package com.example.memory_guard.global.auth.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;

@Builder
@Data
@AllArgsConstructor
public class TokenDto {
  private String grantType;
  private String accessToken;
  private String refreshToken;
}
</file>

<file path="src/main/java/com/example/memory_guard/global/auth/filter/JwtAuthenticationFilter.java">
package com.example.memory_guard.global.auth.filter;

import com.example.memory_guard.global.auth.utils.JwtProvider;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

  private final JwtProvider jwtProvider;

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
    String token = resolveToken(request);

    if (token != null && jwtProvider.validateToken(token)) {
      Authentication authentication = jwtProvider.getAuthentication(token);
      SecurityContextHolder.getContext().setAuthentication(authentication);
    }

    filterChain.doFilter(request, response);
  }

  private String resolveToken(HttpServletRequest request) {
    String bearerToken = request.getHeader("Authorization");
    if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer")) {
      return bearerToken.substring(7);
    }
    return null;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/global/exception/custom/AuthenticationException.java">
package com.example.memory_guard.global.exception.custom;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.UNAUTHORIZED)
public class AuthenticationException extends RuntimeException {
  public AuthenticationException(String message) {
    super(message);
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/global/exception/custom/InvalidRequestException.java">
package com.example.memory_guard.global.exception.custom;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.BAD_REQUEST)
public class InvalidRequestException extends RuntimeException {
  public InvalidRequestException(String message) {
    super(message);
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/global/exception/ErrorResponse.java">
package com.example.memory_guard.global.exception;

record ErrorResponse(String code, String message) {}
</file>

<file path="src/main/java/com/example/memory_guard/global/exception/GlobalExceptionHandler.java">
package com.example.memory_guard.global.exception;

import com.example.memory_guard.global.exception.custom.AuthenticationException;
import com.example.memory_guard.global.exception.custom.InvalidRequestException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.io.IOException;


@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {

  @ExceptionHandler(IllegalArgumentException.class)
  public ResponseEntity<ErrorResponse> handleIllegalArgumentException(IllegalArgumentException ex) {
    log.warn("잘못된 인자 값으로 인한 요청 실패: {}", ex.getMessage());
    ErrorResponse response = new ErrorResponse("INVALID_ARGUMENT", ex.getMessage());
    return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
  }

  @ExceptionHandler(IllegalStateException.class)
  public ResponseEntity<ErrorResponse> handleIllegalStateException(IllegalStateException ex) {
    log.warn("잘못된 상태: {}", ex.getMessage());
    ErrorResponse response = new ErrorResponse("INVALID_STATE", ex.getMessage());
    return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
  }

  @ExceptionHandler(AuthenticationException.class)
  public ResponseEntity<ErrorResponse> handleAuthenticationException(AuthenticationException ex) {
    log.warn("인증 실패: {}", ex.getMessage());
    ErrorResponse response = new ErrorResponse("AUTHENTICATION_FAILED", ex.getMessage());
    return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
  }

  @ExceptionHandler(InvalidRequestException.class)
  public ResponseEntity<ErrorResponse> handleInvalidRequestException(InvalidRequestException ex) {
    log.warn("잘못된 요청: {}", ex.getMessage());
    ErrorResponse response = new ErrorResponse("INVALID_REQUEST", ex.getMessage());
    return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
  }

  @ExceptionHandler(IOException.class)
  public ResponseEntity<ErrorResponse> handleIOException(IOException ex) {
    log.warn("IO 처리 실패: {}", ex.getMessage());
    ErrorResponse response = new ErrorResponse("FILE_IO_ERROR", ex.getMessage());
    return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
  }

  @ExceptionHandler(Exception.class)
  public ResponseEntity<ErrorResponse> handleException(Exception ex) {
    log.error("예외 발생", ex);
    ErrorResponse response = new ErrorResponse("INTERNAL_SERVER_ERROR", "서버 오류");
    return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/global/MainController.java">
package com.example.memory_guard.global;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class MainController {

    @GetMapping("/")
    public String mainPage() {
        return "main";
    }

    @GetMapping("/user/login")
    public String userLogin() {
        return "user-login";
    }

    @GetMapping("/guard/login")
    public String guardLogin() {
        return "guard-login";
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/guard/dto/GuardManagementResponseDto.java">
package com.example.memory_guard.guard.dto;

import com.example.memory_guard.user.domain.GuardRequest;
import com.example.memory_guard.user.domain.GuardUserLink;
import com.example.memory_guard.user.dto.GuardRequestDto;
import com.example.memory_guard.user.dto.WardUserDto;
import lombok.Builder;
import lombok.Getter;

import java.util.List;

@Builder
@Getter
public class GuardManagementResponseDto {
    //현재 연결된 모든 피보호자
    private List<WardUserDto> allWards;
    //받은 요청 list
    private List<GuardRequestDto> allReceivedRequests;
    //보낸 요청 list
    private List<GuardRequestDto> allSentRequests;

    public static GuardManagementResponseDto fromEntity(List<GuardUserLink> allWards, List<GuardRequest> allReceivedRequests, List<GuardRequest> allSentRequests) {
        List<WardUserDto> wardDtos = allWards.stream()
                .map(WardUserDto::fromEntity)
                .toList();

        List<GuardRequestDto> receivedRequestDtos = allReceivedRequests.stream()
                .map(GuardRequestDto::fromEntity)
                .toList();

        List<GuardRequestDto> sentRequestDtos = allSentRequests.stream()
                .map(GuardRequestDto::fromEntity)
                .toList();

        return GuardManagementResponseDto.builder()
                .allWards(wardDtos)
                .allReceivedRequests(receivedRequestDtos)
                .allSentRequests(sentRequestDtos)
                .build();
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/domain/Status.java">
package com.example.memory_guard.user.domain;

public enum Status {
    PENDING, ACCEPTED, REJECTED
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/LoginRequestDto.java">
package com.example.memory_guard.user.dto;

import lombok.Data;

@Data
public class LoginRequestDto {
  private String userId;
  private String password;
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/LoginResponseDto.java">
package com.example.memory_guard.user.dto;

import lombok.Builder;
import lombok.Getter;

import java.util.List;

@Getter
public class LoginResponseDto {

  private String grantType;
  private String accessToken;
  private String userId;
  private List<String> roles;

  @Builder
  public LoginResponseDto(String grantType, String accessToken, String userId, List<String> roles) {
    this.grantType = grantType;
    this.accessToken = accessToken;
    this.userId = userId;
    this.roles = roles;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/UserExistResponseDto.java">
package com.example.memory_guard.user.dto;

import lombok.Builder;
import lombok.Data;
import lombok.Getter;

@Data
@Getter
@Builder
public class UserExistResponseDto {
  boolean exist;

  public UserExistResponseDto(boolean exist){
    this.exist = exist;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/WardHomeResponseDto.java">
package com.example.memory_guard.user.dto;

import com.example.memory_guard.diary.dto.DiaryAudioInfoDto;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.time.LocalDate;
import java.util.List;

@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class WardHomeResponseDto {
    private int consecutiveRecordingDays;
    private List<LocalDate> weeklyStamps;
    private List<DiaryAudioInfoDto> diaryList;
}
</file>

<file path="src/main/java/com/example/memory_guard/user/repository/GuardUserLinkRepository.java">
package com.example.memory_guard.user.repository;

import com.example.memory_guard.user.domain.GuardUserLink;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GuardUserLinkRepository extends JpaRepository<GuardUserLink, Long> {
}
</file>

<file path="src/main/java/com/example/memory_guard/user/repository/RoleRepository.java">
package com.example.memory_guard.user.repository;

import com.example.memory_guard.user.domain.Role;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface RoleRepository extends JpaRepository<Role, Long> {
  Optional<Role> findByName(String roleUser);
}
</file>

<file path="src/main/resources/application-prod.properties">
jwt.secret=${JWT_SECRET}

spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.jpa.hibernate.ddl-auto=update

ai.api.key=${AI_API_KEY}
ai.api.url=${AI_API_URL}

file.upload-dir=${UPLOAD_DIR}
</file>

<file path="src/main/resources/templates/guard-login.html">
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>보호자 로그인</title>
    <style>
        body { font-family: sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f4f4f4; }
        .container { background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); width: 320px; }
        h2 { text-align: center; color: #333; }
        .form-group { margin-bottom: 1rem; }
        label { display: block; margin-bottom: 0.5rem; color: #555; }
        input { width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box; }
        button { width: 100%; padding: 0.7rem; border: none; border-radius: 4px; background-color: #28a745; color: white; font-size: 1rem; cursor: pointer; }
        button:hover { background-color: #218838; }
        #message { margin-top: 1rem; text-align: center; color: red; font-weight: bold; }
        .back-link { text-align: center; margin-top: 1rem; }
        .back-link a { color: #28a745; text-decoration: none; }
        .back-link a:hover { text-decoration: underline; }
    </style>
</head>
<body>

<div class="container">
    <h2>보호자 로그인</h2>
    <form id="login-form">
        <div class="form-group">
            <label for="userId">아이디</label>
            <input type="text" id="userId" name="userId" required>
        </div>
        <div class="form-group">
            <label for="password">비밀번호</label>
            <input type="password" id="password" name="password" required>
        </div>
        <button type="submit">로그인</button>
    </form>
    <p id="message"></p>
    
    <div class="back-link">
        <a href="/">← 메인으로 돌아가기</a>
    </div>
</div>

<script>
    document.getElementById('login-form').addEventListener('submit', async function(event) {
        event.preventDefault();

        const userId = document.getElementById('userId').value;
        const password = document.getElementById('password').value;
        const messageEl = document.getElementById('message');

        try {
            const response = await fetch('/user/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userId, password }),
            });

            if (!response.ok) {
                throw new Error('아이디 또는 비밀번호가 일치하지 않습니다.');
            }

            const tokenInfo = await response.json();
            console.log('로그인 성공:', tokenInfo);

            localStorage.setItem('accessToken', tokenInfo.accessToken);

            messageEl.style.color = 'green';
            messageEl.textContent = '보호자 로그인 성공!';

        } catch (error) {
            console.error('로그인 실패:', error);
            messageEl.style.color = 'red';
            messageEl.textContent = error.message;
        }
    });
</script>

</body>
</html>
</file>

<file path="src/main/resources/templates/main.html">
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>메인 페이지</title>
    <style>
        body { 
            font-family: sans-serif; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            height: 100vh; 
            background-color: #f4f4f4; 
            margin: 0;
        }
        .container { 
            background: white; 
            padding: 3rem; 
            border-radius: 8px; 
            box-shadow: 0 4px 6px rgba(0,0,0,0.1); 
            width: 400px; 
            text-align: center;
        }
        h1 { 
            color: #333; 
            margin-bottom: 2rem;
        }
        .button-group {
            display: flex;
            gap: 1rem;
            justify-content: center;
        }
        button { 
            width: 150px; 
            padding: 1rem; 
            border: none; 
            border-radius: 4px; 
            color: white; 
            font-size: 1.1rem; 
            cursor: pointer; 
            transition: background-color 0.3s;
        }
        .user-btn {
            background-color: #007bff;
        }
        .user-btn:hover {
            background-color: #0056b3;
        }
        .guard-btn {
            background-color: #28a745;
        }
        .guard-btn:hover {
            background-color: #218838;
        }
    </style>
</head>
<body>

<div class="container">
    <h1>로그인 선택</h1>
    <div class="button-group">
        <button class="user-btn" onclick="location.href='/user/login'">사용자</button>
        <button class="guard-btn" onclick="location.href='/guard/login'">보호자</button>
    </div>
</div>

</body>
</html>
</file>

<file path="src/main/resources/templates/user-login.html">
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>사용자 로그인</title>
    <style>
        body { font-family: sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f4f4f4; }
        .container { background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); width: 320px; }
        h2 { text-align: center; color: #333; }
        .form-group { margin-bottom: 1rem; }
        label { display: block; margin-bottom: 0.5rem; color: #555; }
        input { width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box; }
        button { width: 100%; padding: 0.7rem; border: none; border-radius: 4px; background-color: #007bff; color: white; font-size: 1rem; cursor: pointer; }
        button:hover { background-color: #0056b3; }
        #message { margin-top: 1rem; text-align: center; color: red; font-weight: bold; }
        .back-link { text-align: center; margin-top: 1rem; }
        .back-link a { color: #007bff; text-decoration: none; }
        .back-link a:hover { text-decoration: underline; }
    </style>
</head>
<body>

<div class="container">
    <h2>사용자 로그인</h2>
    <form id="login-form">
        <div class="form-group">
            <label for="userId">아이디</label>
            <input type="text" id="userId" name="userId" required>
        </div>
        <div class="form-group">
            <label for="password">비밀번호</label>
            <input type="password" id="password" name="password" required>
        </div>
        <button type="submit">로그인</button>
    </form>
    <p id="message"></p>
    
    <div class="back-link">
        <a href="/">← 메인으로 돌아가기</a>
    </div>
</div>

<script>
    document.getElementById('login-form').addEventListener('submit', async function(event) {
        event.preventDefault();

        const userId = document.getElementById('userId').value;
        const password = document.getElementById('password').value;
        const messageEl = document.getElementById('message');

        try {
            const response = await fetch('/user/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userId, password }),
            });

            if (!response.ok) {
                throw new Error('아이디 또는 비밀번호가 일치하지 않습니다.');
            }

            const tokenInfo = await response.json();
            console.log('로그인 성공:', tokenInfo);

            localStorage.setItem('accessToken', tokenInfo.accessToken);

            messageEl.style.color = 'green';
            messageEl.textContent = '사용자 로그인 성공!';

        } catch (error) {
            console.error('로그인 실패:', error);
            messageEl.style.color = 'red';
            messageEl.textContent = error.message;
        }
    });
</script>

</body>
</html>
</file>

<file path="src/test/java/com/example/memory_guard/repository/DiaryRepositoryTest.java">
package com.example.memory_guard.repository;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.domain.LocalAudioMetadata;
import com.example.memory_guard.diary.domain.Diary;
import com.example.memory_guard.diary.repository.DiaryRepository;
import com.example.memory_guard.user.domain.Role;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.UserProfile;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.context.ActiveProfiles;

import java.util.Optional;

import static org.assertj.core.api.Assertions.*;

@DataJpaTest
@ActiveProfiles("test")
class DiaryRepositoryTest {

    @Autowired
    private DiaryRepository diaryRepository;

    @Autowired
    private TestEntityManager entityManager;

    private User savedUser;
    private AbstractAudioMetadata savedAudioMetadata;

    @BeforeEach
    void setUp() {
        String userId = "testUser";
        String password = "testPassword";
        Role userRole = Role.builder().name("ROLE_USER").build();
        entityManager.persist(userRole);

        UserProfile userProfile = UserProfile.builder()
            .userId(userId)
            .username("테스트사용자")
            .password(password)
            .build();

        User user = User.builder()
            .userProfile(userProfile)
            .build();

        user.addRole(userRole);
        savedUser = entityManager.persist(user);

        AbstractAudioMetadata audioMetadata = LocalAudioMetadata.builder()
            .user(user).
            fileSize(1000L)
            .originalFilename("testFile")
            .duration(20L)
            .filePath("/test")
            .build();

        savedAudioMetadata = entityManager.persist(audioMetadata);
    }

    @Test
    @DisplayName("다이어리 저장 및 ID로 조회 테스트")
    void saveAndFindById() {
        Diary diary = Diary.builder()
            .title("테스트 일기")
            .body("이것은 테스트 내용입니다.")
            .author(savedUser)
            .audioMetadata(savedAudioMetadata)
            .build();

        Diary savedDiary = diaryRepository.save(diary);

        Optional<Diary> foundDiaryOpt = diaryRepository.findById(savedDiary.getId());

        assertThat(foundDiaryOpt).isPresent();
        Diary foundDiary = foundDiaryOpt.get();
        assertThat(foundDiary.getId()).isEqualTo(savedDiary.getId());
        assertThat(foundDiary.getTitle()).isEqualTo("테스트 일기");
        assertThat(foundDiary.getAuthor().getId()).isEqualTo(savedUser.getId());
        assertThat(foundDiary.getAudioMetadata().getId()).isEqualTo(savedAudioMetadata.getId());

        assertThat(foundDiary.getCreatedAt()).isNotNull();
    }

    @Test
    @DisplayName("AudioMetadata ID로 다이어리 조회 성공 테스트")
    void findByAudioMetadataId_Success() {
        Diary diary = Diary.builder()
            .title("오디오 ID로 찾을 일기")
            .body("내용")
            .author(savedUser)
            .audioMetadata(savedAudioMetadata)
            .build();
        diaryRepository.save(diary);

        entityManager.flush();
        entityManager.clear();

        Optional<Diary> foundDiaryOpt = diaryRepository.findByAudioMetadataId(savedAudioMetadata.getId());

        assertThat(foundDiaryOpt).isPresent();
        assertThat(foundDiaryOpt.get().getTitle()).isEqualTo("오디오 ID로 찾을 일기");
        assertThat(foundDiaryOpt.get().getAudioMetadata().getId()).isEqualTo(savedAudioMetadata.getId());
    }

    @Test
    @DisplayName("AudioMetadata ID로 다이어리 조회 실패 테스트 (존재하지 않는 ID)")
    void findByAudioMetadataId_Fail() {
        Long nonExistentAudioId = 999L;

        Optional<Diary> foundDiaryOpt = diaryRepository.findByAudioMetadataId(nonExistentAudioId);

        assertThat(foundDiaryOpt).isEmpty();
    }
}
</file>

<file path="src/test/java/com/example/memory_guard/service/DiaryServiceTest.java">
package com.example.memory_guard.service;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.domain.LocalAudioMetadata;
import com.example.memory_guard.diary.domain.Diary;
import com.example.memory_guard.diary.repository.DiaryRepository;
import com.example.memory_guard.diary.service.DiaryService;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.UserProfile;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class DiaryServiceTest {

  @InjectMocks
  private DiaryService diaryService;

  @Mock
  private DiaryRepository diaryRepository;

  private User testUser;
  private AbstractAudioMetadata mockAudioMetadata;
  private Diary testDiary;
  private File tempFile;

  @BeforeEach
  void setUp() throws IOException {
    UserProfile userProfile = UserProfile.builder().userId("testUser").username("테스트사용자").password("password").build();
    testUser = User.builder().userProfile(userProfile).build();

    Path tempFilePath = Files.createTempFile("test-audio", ".wav");
    tempFile = tempFilePath.toFile();

    mockAudioMetadata = LocalAudioMetadata.builder()
        .filePath(tempFile.getAbsolutePath())
        .user(testUser)
        .build();

    testDiary = Diary.builder()
        .title("제목")
        .body("본문")
        .author(testUser)
        .audioMetadata(mockAudioMetadata)
        .build();
  }

  @Test
  @DisplayName("성공: 오디오 메타데이터로 일기를 생성하고 저장한다")
  void createAudioDiary_Success() throws IOException {
    diaryService.createAudioDiary(mockAudioMetadata, testUser);

    verify(diaryRepository, times(1)).save(any(Diary.class));
  }

  @Test
  @DisplayName("성공: 오디오 ID로 다이어리를 성공적으로 조회한다")
  void getDairyByAudioId_Success() {
    Long audioId = 1L;
    when(diaryRepository.findByAudioMetadataId(audioId)).thenReturn(Optional.of(testDiary));

    Diary foundDiary = diaryService.getDairyByAudioId(audioId);

    assertThat(foundDiary).isNotNull();
    assertThat(foundDiary.getTitle()).isEqualTo("제목");
    verify(diaryRepository, times(1)).findByAudioMetadataId(audioId);
  }

  @Test
  @DisplayName("실패: 존재하지 않는 오디오 ID로 조회 시 예외가 발생한다")
  void getDairyByAudioId_NotFound_ThrowsException() {
    Long nonExistentAudioId = 999L;
    when(diaryRepository.findByAudioMetadataId(nonExistentAudioId)).thenReturn(Optional.empty());

    assertThatThrownBy(() -> diaryService.getDairyByAudioId(nonExistentAudioId))
        .isInstanceOf(IllegalArgumentException.class)
        .hasMessage("해당 오디오 ID에 맞는 다이어리를 찾을 수 없습니다: " + nonExistentAudioId);
  }
}
</file>

<file path="src/test/resources/application-test.properties">
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.sql.init.mode=never
</file>

<file path=".gitignore">
HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/
.env
</file>

<file path="Dockerfile">
FROM eclipse-temurin:17-jdk-jammy AS builder

WORKDIR /app

COPY gradlew .
COPY gradle/ ./gradle
COPY build.gradle .
COPY settings.gradle .

RUN chmod +x ./gradlew

COPY src/ ./src

RUN ./gradlew bootJar --no-daemon


FROM eclipse-temurin:17-jre-jammy

RUN apt-get update && apt-get install -y ffmpeg

WORKDIR /app

EXPOSE 8080

COPY --from=builder /app/build/libs/*.jar app.jar

ENTRYPOINT ["java", "-jar", "app.jar"]
</file>

<file path="src/main/java/com/example/memory_guard/analysis/dto/OverallAnalysisResponseDto.java">
package com.example.memory_guard.analysis.dto;

import lombok.Data;
import lombok.Getter;

@Data
@Getter
public class OverallAnalysisResponseDto {

  private double score;
  private double dementiaProbability;
  private double speakingRate;
  private double utteranceVolume;
  private double avgSilenceDuration;
  private double vocabularyAccuracy;
  private double fillerFrequency;
  private double repetitionRatio;
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/service/AudioAnalysisService.java">
package com.example.memory_guard.analysis.service;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.analysis.domain.AbstractOverallAnalysis;
import com.example.memory_guard.analysis.repository.OverallAnalysisRepository;
import com.example.memory_guard.analysis.strategy.AudioAnalysisStrategy;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import com.example.memory_guard.user.domain.User;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class AudioAnalysisService {
  private final List<AudioAnalysisStrategy> strategies;
  private final OverallAnalysisRepository feedbackRepository;

  public List<AbstractOverallAnalysis> evaluate(AbstractAudioMetadata metadata, User user) throws IOException {
    File audioFile = metadata.getFile();
    List<AbstractOverallAnalysis> feedbacks = new ArrayList<>();

    for (AudioAnalysisStrategy strategy : strategies) {
      log.info("음성 분석을 시작합니다. 음성 분석 모델: {}", strategy.toString());
      AbstractOverallAnalysis feedback = strategy.evaluate(metadata, user);
      log.info("AUDIO SCORE: {}", feedback.getScore());
      feedbacks.add(feedback);
    }

    feedbackRepository.saveAll(feedbacks);
    return feedbacks;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/service/AudioStorageService.java">
package com.example.memory_guard.audio.service;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.repository.AudioMetadataRepository;
import com.example.memory_guard.audio.strategy.AudioSaveStrategy;
import com.example.memory_guard.user.domain.User;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.File;
import java.io.IOException;

@Service
public class AudioStorageService {
  private final AudioSaveStrategy audioSaveStrategy;
  private final AudioMetadataRepository audioMetadataRepository;

  public AudioStorageService(@Qualifier("localAudioSaveStrategy") AudioSaveStrategy audioSaveStrategy,
                             AudioMetadataRepository audioMetadataRepository ){
    this.audioSaveStrategy = audioSaveStrategy;
    this.audioMetadataRepository = audioMetadataRepository;
  }

  public AbstractAudioMetadata save(File audioFile, User user) throws IOException, UnsupportedAudioFileException {
    AbstractAudioMetadata metadata = audioSaveStrategy.save(audioFile, user);
    return audioMetadataRepository.save(metadata);
  }

  public AbstractAudioMetadata getFile(Long id) throws IOException {

    return audioMetadataRepository.findById(id)
        .orElseThrow(() -> new IllegalStateException("존재하지 않는 Metadata입니다."));
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/utils/AudioConversionUtils.java">
package com.example.memory_guard.audio.utils;

import lombok.extern.slf4j.Slf4j;
import net.bramp.ffmpeg.FFmpeg;
import net.bramp.ffmpeg.FFmpegExecutor;
import net.bramp.ffmpeg.FFprobe;
import net.bramp.ffmpeg.builder.FFmpegBuilder;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Slf4j
@Component
public class AudioConversionUtils {

    public File convertToWav(MultipartFile audioFile, String outputPath) throws IOException {
        FFmpeg ffmpeg = new FFmpeg();
        FFprobe ffprobe = new FFprobe();
        FFmpegExecutor executor = new FFmpegExecutor(ffmpeg, ffprobe);

        // 임시 파일 생성
        Path tempInputFile = Files.createTempFile("temp_audio_", getOriginalExtension(audioFile.getOriginalFilename()));
        audioFile.transferTo(tempInputFile.toFile());

        // WAV 출력 파일 경로
        Path outputFilePath = Paths.get(outputPath);
        
        try {
            FFmpegBuilder builder = new FFmpegBuilder()
                    .setInput(tempInputFile.toString())
                    .overrideOutputFiles(true)
                    .addOutput(outputFilePath.toString())
                    .setFormat("wav")
                    .setAudioCodec("pcm_s16le")
                    .setAudioSampleRate(44100)
                    .setAudioChannels(1)
                    .done();

            executor.createJob(builder).run();
            log.info("Audio conversion completed: {} -> {}", tempInputFile, outputFilePath);
            
            return outputFilePath.toFile();
        } finally {
            Files.deleteIfExists(tempInputFile);
        }
    }

    private String getOriginalExtension(String filename) {
        if (filename == null || !filename.contains(".")) {
            return ".m4a";
        }
        return filename.substring(filename.lastIndexOf("."));
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/utils/AudioUtils.java">
package com.example.memory_guard.audio.utils;

import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.AudioHeader;
import org.springframework.web.multipart.MultipartFile;

import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.*;

public class AudioUtils {

    public static int getAudioSecondTimeFromFile(File file) throws UnsupportedAudioFileException, IOException {
        AudioFileFormat fileFormat = AudioSystem.getAudioFileFormat(file);
        long frames = fileFormat.getFrameLength();
        float frameRate = fileFormat.getFormat().getFrameRate();

        if (frames > 0 && frameRate > 0) {
          double durationInSeconds = frames / (double) frameRate;
          return (int) Math.round(durationInSeconds);
        }
        return 0;
    }

  public static int getAudioSecondTimeFromMultipartFile(MultipartFile multipartFile) throws IOException, UnsupportedAudioFileException {
      InputStream inputStream =  new BufferedInputStream(multipartFile.getInputStream());
      AudioFileFormat fileFormat = AudioSystem.getAudioFileFormat(inputStream);
      long frames = fileFormat.getFrameLength();
      float frameRate = fileFormat.getFormat().getFrameRate();

      if (frames > 0 && frameRate > 0) {
        double durationInSeconds = frames / (double) frameRate;
        return (int) Math.round(durationInSeconds);
      }
      return 0;
  }
  }
</file>

<file path="src/main/java/com/example/memory_guard/diary/domain/Diary.java">
package com.example.memory_guard.diary.domain;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.user.domain.User;
import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

@Getter
@Entity
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@EntityListeners(AuditingEntityListener.class)
public class Diary {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private String title;
  private String body;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "user_id")
  private User author;

  @OneToOne
  private AbstractAudioMetadata audioMetadata;

  @CreatedDate
  private LocalDateTime createdAt;

  @Builder
  public Diary(String title, String body, User author, AbstractAudioMetadata audioMetadata){
    this.title = title;
    this.body = body;
    this.author = author;
    this.audioMetadata = audioMetadata;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/global/config/SecurityConfig.java">
package com.example.memory_guard.global.config;

import com.example.memory_guard.global.auth.filter.JwtAuthenticationFilter;
import com.example.memory_guard.global.auth.utils.JwtProvider;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {

  private final JwtProvider jwtProvider;

  @Bean
  public JwtAuthenticationFilter jwtAuthenticationFilter(JwtProvider jwtProvider){
    return new JwtAuthenticationFilter(jwtProvider);
  }

  @Bean
  public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    http
        .csrf(csrf -> csrf.disable())
        .httpBasic(httpBasic -> httpBasic.disable())
        .formLogin(formLogin -> formLogin.disable())
        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
//       JWT 인증처리 비활성화
//        .authorizeHttpRequests(auth -> auth
//            .requestMatchers("/", "/user/login", "/guard/login", "/token/reissue").permitAll()
//            .requestMatchers("/api/ward/**").hasRole("USER")
//            .requestMatchers("/api/guard/**").hasRole("GUARD")
//            .anyRequest().authenticated()
//        )
        .authorizeHttpRequests(auth -> auth
            .requestMatchers("/**").permitAll()
            .anyRequest().authenticated()
        )
        .addFilterBefore(new JwtAuthenticationFilter(jwtProvider), UsernamePasswordAuthenticationFilter.class);

    return http.build();
  }

  @Bean
  public PasswordEncoder passwordEncoder() {
    return PasswordEncoderFactories.createDelegatingPasswordEncoder();
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/guard/dto/GuardReportResponseDto.java">
package com.example.memory_guard.guard.dto;

import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class GuardReportResponseDto {
    //희승님이 보내신 ai data

    private long weeklyAttendanceCount;
    //교정 횟수(아직 api 없음)
    private long correctionCount;
}
</file>

<file path="src/main/java/com/example/memory_guard/SpringMemoryGuard.java">
package com.example.memory_guard;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

@SpringBootApplication
@EnableJpaAuditing
public class SpringMemoryGuard {

	public static void main(String[] args) {
		SpringApplication.run(SpringMemoryGuard.class, args);
	}

}
</file>

<file path="src/main/java/com/example/memory_guard/user/domain/UserProfile.java">
package com.example.memory_guard.user.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Embeddable
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
public class UserProfile {

  @Column(unique = true, nullable = false)
  private String userId;

  @Column(nullable = false)
  private String username;

  @Column(nullable = false)
  private String password;

  @Builder
  public UserProfile(String userId, String username, String password) {
    this.userId = userId;
    this.username = username;
    this.password = password;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/GuardManagementResponseDto.java">
package com.example.memory_guard.user.dto;

import com.example.memory_guard.user.domain.GuardRequest;
import com.example.memory_guard.user.domain.GuardUserLink;
import lombok.Builder;
import lombok.Getter;

import java.util.List;

@Builder
@Getter
public class GuardManagementResponseDto {
    //현재 연결된 모든 보호자
    private List<GuardUserDto> allGuards;
    //받은 요청 list
    private List<GuardRequestDto> allReceivedRequests;
    //보낸 요청 list
    private List<GuardRequestDto> allSentRequests;

    public static GuardManagementResponseDto fromEntity(List<GuardUserLink> allGuards, List<GuardRequest> allReceivedRequests, List<GuardRequest> allSentRequests) {
        List<GuardUserDto> guardsDto = allGuards.stream()
                .map(GuardUserDto::fromEntity)
                .toList();

        List<GuardRequestDto> receivedRequestDtos = allReceivedRequests.stream()
                .map(GuardRequestDto::fromEntity)
                .toList();

        List<GuardRequestDto> sentRequestDtos = allSentRequests.stream()
                .map(GuardRequestDto::fromEntity)
                .toList();

        return GuardManagementResponseDto.builder()
                .allGuards(guardsDto)
                .allReceivedRequests(receivedRequestDtos)
                .allSentRequests(sentRequestDtos)
                .build();
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/GuardRequestDto.java">
package com.example.memory_guard.user.dto;

import com.example.memory_guard.user.domain.GuardRequest;
import com.example.memory_guard.user.domain.Status;
import com.example.memory_guard.user.domain.User;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class GuardRequestDto {
    private Long id;
    private Long requesterId;
    private String requesterUserId;
    private Long receiverId;
    private String receiverUserId;
    private Status status;

    public static GuardRequestDto fromEntity(GuardRequest request) {
        return GuardRequestDto.builder()
                .id(request.getId())
                .requesterId(request.getRequester().getId())
                .requesterUserId(request.getRequester().getUserProfile().getUserId())
                .receiverId(request.getReceiver().getId())
                .receiverUserId(request.getReceiver().getUserProfile().getUserId())
                .status(request.getStatus())
                .build();
    }

    public static GuardRequest toEntity(User requester, User receiver) {
        return GuardRequest.builder()
                .requester(requester)
                .receiver(receiver)
                .status(Status.PENDING)
                .build();
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/GuardSignupRequestDto.java">
package com.example.memory_guard.user.dto;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Data
@EqualsAndHashCode(callSuper = true)
public class GuardSignupRequestDto extends SignupRequestDto {
  private String wardUserId;
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/SignupRequestDto.java">
package com.example.memory_guard.user.dto;

import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class SignupRequestDto {
  private String userId;
  private String username;
  private String password;
}
</file>

<file path="src/main/java/com/example/memory_guard/user/repository/GuardRequestRepository.java">
package com.example.memory_guard.user.repository;

import com.example.memory_guard.user.domain.GuardRequest;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface GuardRequestRepository extends JpaRepository<GuardRequest, Long> {
    Optional<GuardRequest> findGuardRequestById(Long requestId);
}
</file>

<file path="src/test/java/com/example/memory_guard/controller/DiaryControllerTest.java">
package com.example.memory_guard.controller;

import com.example.memory_guard.diary.controller.DiaryController;
import com.example.memory_guard.diary.dto.DiaryResponseDto;
import com.example.memory_guard.diary.service.DiaryService;
import com.example.memory_guard.global.auth.utils.JwtProvider;
import com.example.memory_guard.global.config.SecurityConfig;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.UserProfile;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.data.jpa.mapping.JpaMetamodelMappingContext;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import java.time.LocalDate;
import java.util.Collections;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@MockBean(JpaMetamodelMappingContext.class)
@WebMvcTest(controllers = DiaryController.class)
@Import(SecurityConfig.class)
class DiaryControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private DiaryService diaryService;

    @MockBean
    private JwtProvider jwtProvider;

    private User testUser;

    @BeforeEach
    void setUp(WebApplicationContext webApplicationContext) {
        this.mockMvc = MockMvcBuilders
            .webAppContextSetup(webApplicationContext)
            .apply(springSecurity())
            .build();

        UserProfile userProfile = UserProfile.builder()
            .userId("testUser")
            .username("테스트사용자")
            .password("password")
            .build();
        testUser = User.builder().userProfile(userProfile).build();
        testUser.setId(1L);

        SecurityContextHolder.getContext().setAuthentication(
            new UsernamePasswordAuthenticationToken(testUser, "", testUser.getAuthorities())
        );
    }

    @Test
    @DisplayName("성공: 사용자의 일기 목록을 정상적으로 조회한다")
    void getUserDiaries_Success() throws Exception {
        // given
        List<DiaryResponseDto> mockDiaries = List.of(
            DiaryResponseDto.builder()
                .title("첫 번째 일기")
                .body("오늘은 날씨가 좋았다.")
                .authorName("테스트사용자")
                .writtenAt(LocalDate.now())
                .build(),
            DiaryResponseDto.builder()
                .title("두 번째 일기")
                .body("내일은 비가 온다.")
                .authorName("테스트사용자")
                .writtenAt(LocalDate.now().minusDays(1))
                .build()
        );

        when(diaryService.getUserDiaries(testUser.getId())).thenReturn(mockDiaries);

        mockMvc.perform(get("/api/ward/diarys"))
            .andDo(print())
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$[0].title").value("첫 번째 일기"))
            .andExpect(jsonPath("$[0].body").value("오늘은 날씨가 좋았다."))
            .andExpect(jsonPath("$[1].title").value("두 번째 일기"))
            .andExpect(jsonPath("$[1].authorName").value("테스트사용자"));

        verify(diaryService, times(1)).getUserDiaries(testUser.getId());
    }

    @Test
    @DisplayName("성공: 작성된 일기가 없을 경우 빈 배열을 반환한다")
    void getUserDiaries_EmptyList() throws Exception {
        when(diaryService.getUserDiaries(testUser.getId())).thenReturn(Collections.emptyList());

        mockMvc.perform(get("/api/ward/diarys"))
            .andDo(print())
            .andExpect(status().isOk())
            .andExpect(content().json(objectMapper.writeValueAsString(Collections.emptyList())));

        verify(diaryService, times(1)).getUserDiaries(testUser.getId());
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/controller/QuestionController.java">
package com.example.memory_guard.audio.controller;

import com.example.memory_guard.audio.dto.response.QuestionResponseDto;
import com.example.memory_guard.global.ai.GeminiClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/ward/audio")
public class QuestionController {

  private final GeminiClient geminiService;

  @Autowired
  public QuestionController(GeminiClient geminiService) {
    this.geminiService = geminiService;
  }

  @GetMapping("/question")
  public ResponseEntity<QuestionResponseDto> getTodaysQuestion() {
    String response = geminiService.generateQuestion();

    QuestionResponseDto questionResponseDto = new QuestionResponseDto(response);

    return ResponseEntity.ok(questionResponseDto);
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/domain/LocalAudioMetadata.java">
package com.example.memory_guard.audio.domain;

import com.example.memory_guard.user.domain.User;
import jakarta.persistence.Column;
import jakarta.persistence.DiscriminatorValue;
import jakarta.persistence.Entity;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.io.File;
import java.io.IOException;

@Getter
@Entity
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@DiscriminatorValue("LOCAL")
public class LocalAudioMetadata extends AbstractAudioMetadata {

  @Column(name = "file_path", nullable = false)
  private String filePath;

  @Override
  public File getFile() throws IOException {
    File audioFile = new File(filePath);

    if (!audioFile.exists()) {
      throw new IOException("파일을 찾을 수 없습니다: " + filePath);
    }

    return audioFile;
  }

  @Builder
  public LocalAudioMetadata(User user, String originalFilename, Long fileSize, Long duration, String filePath) {
    super(user, originalFilename, fileSize, duration);
    this.filePath = filePath;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/diary/repository/DiaryRepository.java">
package com.example.memory_guard.diary.repository;

import com.example.memory_guard.diary.domain.Diary;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
import java.util.Optional;

public interface DiaryRepository extends JpaRepository<Diary, Long> {
  Optional<Diary> findByAudioMetadataId(Long audioMetadataId);
  List<Diary> findByAuthorId(Long authorId);
  List<Diary> findAllByAuthorIdOrderByCreatedAtDesc(Long authorId);
}
</file>

<file path="src/main/java/com/example/memory_guard/global/auth/utils/JwtProvider.java">
package com.example.memory_guard.global.auth.utils;
import com.example.memory_guard.global.auth.dto.TokenDto;
import com.example.memory_guard.user.repository.UserRepository;
import io.jsonwebtoken.*;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.stream.Collectors;

@Slf4j
@Component
public class JwtProvider {

  private final Key key;
  private final long accessTokenExpirationMillis;
  private final long refreshTokenExpirationMillis;
  private final UserRepository userRepository;

  public JwtProvider(@Value("${jwt.secret}") String secretKey,
                     @Value("${jwt.access-token-expiration-millis}") long accessToken,
                     @Value("${jwt.refresh-token-expiration-millis}") long refreshToken, UserRepository userRepository) {
    this.userRepository = userRepository;
    byte[] keyBytes = Decoders.BASE64.decode(secretKey);
    this.key = Keys.hmacShaKeyFor(keyBytes);
    this.accessTokenExpirationMillis = accessToken;
    this.refreshTokenExpirationMillis = refreshToken;
  }

  public String getUserIdFromToken(String token) {
    return parseClaims(token).getSubject();
  }

  public TokenDto generateToken(Authentication authentication) {
    String authorities = authentication.getAuthorities().stream()
        .map(GrantedAuthority::getAuthority)
        .collect(Collectors.joining(","));

    String subject = authentication.getName();

    String accessToken = createAccessToken(subject, authorities);
    String refreshToken = createRefreshToken(subject);

    return TokenDto.builder()
        .grantType("Bearer")
        .accessToken(accessToken)
        .refreshToken(refreshToken)
        .build();
  }

  public String createAccessToken(String subject, String authorities) {
    long now = (new Date()).getTime();
    Date accessTokenExpiresIn = new Date(now + accessTokenExpirationMillis);

    return Jwts.builder()
        .setSubject(subject)
        .claim("auth", authorities)
        .setExpiration(accessTokenExpiresIn)
        .signWith(key, SignatureAlgorithm.HS256)
        .compact();
  }

  public String createRefreshToken(String subject) {
    long now = (new Date()).getTime();
    Date refreshTokenExpiresIn = new Date(now + refreshTokenExpirationMillis);

    return Jwts.builder()
        .setSubject(subject)
        .setExpiration(refreshTokenExpiresIn)
        .signWith(key, SignatureAlgorithm.HS256)
        .compact();
  }


  /// // 여기가 문제 나의 User객체를 UserDetail로 구현하면 해결가능
  public Authentication getAuthentication(String accessToken) {
    Claims claims = parseClaims(accessToken);

    if (claims.get("auth") == null) {
      throw new RuntimeException("권한 정보가 없는 토큰입니다.");
    }

    String userId = claims.getSubject();

    UserDetails principal = userRepository.findByUserProfileUserId(userId)
        .orElseThrow(() -> new UsernameNotFoundException("사용자를 찾을 수 없습니다: " + userId));

    return new UsernamePasswordAuthenticationToken(principal, "", principal.getAuthorities());
  }

  public boolean validateToken(String token) {
    try {
      Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);
      return true;
    } catch (io.jsonwebtoken.security.SecurityException | MalformedJwtException e) {
      log.info("Invalid JWT Token", e);
    } catch (ExpiredJwtException e) {
      log.info("Expired JWT Token", e);
    } catch (UnsupportedJwtException e) {
      log.info("Unsupported JWT Token", e);
    } catch (IllegalArgumentException e) {
      log.info("JWT claims string is empty.", e);
    }
    return false;
  }

  private Claims parseClaims(String accessToken) {
    try {
      return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(accessToken).getBody();
    } catch (ExpiredJwtException e) {
      return e.getClaims();
    }
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/guard/dto/GuardCalendarResponseDto.java">
package com.example.memory_guard.guard.dto;

import lombok.Builder;
import lombok.Getter;

import java.time.LocalDate;
import java.util.List;

@Builder
@Getter
public class GuardCalendarResponseDto {
    private long monthlyAttendanceCount;
    private List<LocalDate> monthlyAttendance;
}
</file>

<file path="src/main/java/com/example/memory_guard/guard/dto/GuardHomeResponseDto.java">
package com.example.memory_guard.guard.dto;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.diary.domain.Diary;
import com.example.memory_guard.diary.dto.DiaryInfoDto;
import lombok.Builder;
import lombok.Getter;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

@Builder
@Getter
public class GuardHomeResponseDto {

    private String username;
    private List<LocalDate> weeklyStamps;
    private int consecutiveRecordingDays;
    private String wardUsername;
    private List<DiaryInfoDto> diarys;
}
</file>

<file path="src/main/java/com/example/memory_guard/guard/dto/GuardSettingResponseDto.java">
package com.example.memory_guard.guard.dto;

import com.example.memory_guard.user.domain.GuardUserLink;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.dto.WardUserDto;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class GuardSettingResponseDto {
    private Long id;
    private String userId;
    private String name;
    private boolean isPrimaryWard;

    public static GuardSettingResponseDto fromEntity(GuardUserLink guardUserLink, User guardian) {
        User ward = guardUserLink.getWard();
        User primaryWard = guardian.getPrimaryWard();

        boolean isPrimary = primaryWard != null && primaryWard.equals(ward);

        return GuardSettingResponseDto.builder()
            .id(ward.getId())
            .userId(ward.getUserProfile().getUserId())
            .name(ward.getUserProfile().getUsername())
            .isPrimaryWard(isPrimary)
            .build();
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/domain/GuardRequest.java">
package com.example.memory_guard.user.domain;

import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;

import java.time.LocalDateTime;

@Getter
@Setter
@Entity
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class GuardRequest {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "requester_id")
    private User requester;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "receiver_id")
    private User receiver;

    @Enumerated(EnumType.STRING)
    private Status status; // PENDING, ACCEPTED, REJECTED

    @CreatedDate
    @Column(updatable = false)
    private LocalDateTime createdAt;

}
</file>

<file path="src/main/java/com/example/memory_guard/user/domain/GuardUserLink.java">
package com.example.memory_guard.user.domain;

import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Getter
@Entity
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@Table(name = "guard_user_link")
public class GuardUserLink {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "guardian_id", nullable = false)
  private User guardian;

  @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
  @JoinColumn(name = "ward_id", nullable = false)
  private User ward;

  public GuardUserLink(User guardian, User ward) {
    this.guardian = guardian;
    this.ward = ward;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/domain/Role.java">
package com.example.memory_guard.user.domain;

import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Entity
@Getter
@Table(name = "roles")
@NoArgsConstructor(access = AccessLevel.PROTECTED)
public class Role {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(nullable = false, unique = true)
  private String name;


  @Builder
  public Role(String name) {
    this.name = name;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/WardUserDto.java">
package com.example.memory_guard.user.dto;

import com.example.memory_guard.user.domain.GuardUserLink;
import com.example.memory_guard.user.domain.User;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
public class WardUserDto {
    private Long id;
    private String userId;
    private String name;
    private boolean isPrimary;

    public static WardUserDto fromEntity(User primaryWard, boolean isPrimary) {
        WardUserDto wardUserDto = new WardUserDto();
        wardUserDto.setId(primaryWard.getId());
        wardUserDto.setUserId(primaryWard.getUserProfile().getUserId());
        wardUserDto.setName(primaryWard.getUserProfile().getUsername());
        wardUserDto.setPrimary(isPrimary);
        return wardUserDto;
    }

    public static WardUserDto fromEntity(GuardUserLink guardUserLink) {
        User ward = guardUserLink.getWard();
        WardUserDto dto = new WardUserDto();
        dto.setId(ward.getId());
        dto.setUserId(ward.getUserProfile().getUserId());
        dto.setName(ward.getUserProfile().getUsername());
        dto.setPrimary(guardUserLink.getGuardian().getPrimaryWard().equals(ward));
        return dto;
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/repository/UserRepository.java">
package com.example.memory_guard.user.repository;

import com.example.memory_guard.user.domain.User;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User,Long> {
  Optional<User> findUserById(Long id);
  Optional<User> findByUserProfileUserId(String userId);
  Optional<User> findByUserProfileUsername(String username);
  boolean existsByUserProfileUsername(String username);
  boolean existsByUserProfileUserId(String userId);
}
</file>

<file path="src/test/java/com/example/memory_guard/controller/UserControllerTest.java">
package com.example.memory_guard.controller;

import com.example.memory_guard.global.auth.dto.TokenDto;
import com.example.memory_guard.global.exception.custom.AuthenticationException;
import com.example.memory_guard.user.controller.UserController;
import com.example.memory_guard.user.dto.GuardSignupRequestDto;
import com.example.memory_guard.user.dto.LoginRequestDto;
import com.example.memory_guard.user.dto.LoginResponseDto;
import com.example.memory_guard.user.dto.SignupRequestDto;
import com.example.memory_guard.user.service.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.Cookie;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.jpa.mapping.JpaMetamodelMappingContext;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(controllers = UserController.class, 
    excludeAutoConfiguration = {SecurityAutoConfiguration.class})
@MockBean(JpaMetamodelMappingContext.class)
@ActiveProfiles("test")
class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockitoBean
    private UserService userService;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    @DisplayName("성공: 보호자 회원가입 요청")
    void guardSignup_Success() throws Exception {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        doNothing().when(userService).guardSignup(any(GuardSignupRequestDto.class));

        mockMvc.perform(post("/guard/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(content().string("보호자 회원가입이 완료되었습니다."));

        verify(userService).guardSignup(any(GuardSignupRequestDto.class));
    }

    @Test
    @DisplayName("실패: 중복된 userId로 보호자 회원가입")
    void guardSignup_DuplicateUserId() throws Exception {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        doThrow(new IllegalArgumentException("이미 존재하는 사용자 ID입니다."))
            .when(userService).guardSignup(any(GuardSignupRequestDto.class));

        mockMvc.perform(post("/guard/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(jsonPath("$.code").value("INVALID_ARGUMENT"))
                .andExpect(jsonPath("$.message").value("이미 존재하는 사용자 ID입니다."));
    }

    @Test
    @DisplayName("실패: 중복된 username으로 보호자 회원가입")
    void guardSignup_DuplicateUsername() throws Exception {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        doThrow(new IllegalArgumentException("이미 존재하는 사용자명입니다."))
            .when(userService).guardSignup(any(GuardSignupRequestDto.class));

        mockMvc.perform(post("/guard/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(jsonPath("$.code").value("INVALID_ARGUMENT"))
                .andExpect(jsonPath("$.message").value("이미 존재하는 사용자명입니다."));
    }

    @Test
    @DisplayName("실패: 존재하지 않는 피보호자")
    void guardSignup_WardNotFound() throws Exception {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("nonexistent");

        doThrow(new IllegalArgumentException("존재하지 않는 피보호자입니다."))
            .when(userService).guardSignup(any(GuardSignupRequestDto.class));

        mockMvc.perform(post("/guard/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.code").value("INVALID_ARGUMENT"))
                .andExpect(jsonPath("$.message").value("존재하지 않는 피보호자입니다."));
    }

    @Test
    @DisplayName("실패: 피보호자가 ROLE_USER 권한이 없음")
    void guardSignup_WardHasNoUserRole() throws Exception {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        doThrow(new IllegalArgumentException("해당 사용자는 피보호자 권한이 없습니다."))
            .when(userService).guardSignup(any(GuardSignupRequestDto.class));

        mockMvc.perform(post("/guard/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.code").value("INVALID_ARGUMENT"))
                .andExpect(jsonPath("$.message").value("해당 사용자는 피보호자 권한이 없습니다."));
    }

    @Test
    @DisplayName("실패: ROLE_GUARD가 존재하지 않음")
    void guardSignup_GuardRoleNotFound() throws Exception {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        doThrow(new IllegalStateException("ROLE_GUARD가 존재하지 않습니다."))
            .when(userService).guardSignup(any(GuardSignupRequestDto.class));

        mockMvc.perform(post("/guard/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.code").value("INVALID_STATE"))
                .andExpect(jsonPath("$.message").value("ROLE_GUARD가 존재하지 않습니다."));
    }

    @Test
    @DisplayName("성공: 피보호자 회원가입 요청")
    void wardSignup_Success() throws Exception {
        SignupRequestDto request = new SignupRequestDto();
        request.setUserId("user1");
        request.setUsername("사용자1");
        request.setPassword("password123");

        doNothing().when(userService).signup(any(SignupRequestDto.class));

        mockMvc.perform(post("/ward/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(content().string("회원가입이 완료되었습니다."));

        verify(userService).signup(any(SignupRequestDto.class));
    }

    @Test
    @DisplayName("실패: 중복된 userId로 피보호자 회원가입")
    void wardSignup_DuplicateUserId() throws Exception {
        SignupRequestDto request = new SignupRequestDto();
        request.setUserId("user1");
        request.setUsername("사용자1");
        request.setPassword("password123");

        doThrow(new IllegalArgumentException("이미 존재하는 사용자 ID입니다."))
            .when(userService).signup(any(SignupRequestDto.class));

        mockMvc.perform(post("/ward/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(jsonPath("$.code").value("INVALID_ARGUMENT"))
                .andExpect(jsonPath("$.message").value("이미 존재하는 사용자 ID입니다."));
    }

    @Test
    @DisplayName("실패: 중복된 username으로 피보호자 회원가입")
    void wardSignup_DuplicateUsername() throws Exception {
        SignupRequestDto request = new SignupRequestDto();
        request.setUserId("user1");
        request.setUsername("사용자1");
        request.setPassword("password123");

        doThrow(new IllegalArgumentException("이미 존재하는 사용자명입니다."))
            .when(userService).signup(any(SignupRequestDto.class));

        mockMvc.perform(post("/ward/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(jsonPath("$.code").value("INVALID_ARGUMENT"))
                .andExpect(jsonPath("$.message").value("이미 존재하는 사용자명입니다."));
    }

    @Test
    @DisplayName("실패: 필수 필드 누락")
    void guardSignup_MissingFields() throws Exception {
        GuardSignupRequestDto request = new GuardSignupRequestDto();

        doThrow(new IllegalArgumentException("필수 필드가 누락되었습니다."))
            .when(userService).guardSignup(any(GuardSignupRequestDto.class));

        mockMvc.perform(post("/guard/signup")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isBadRequest());
    }

    @Test
    @DisplayName("성공: 정상적인 로그인 요청")
    void login_Success() throws Exception {
        LoginRequestDto loginRequest = new LoginRequestDto();
        loginRequest.setUserId("testUser");
        loginRequest.setPassword("password");

        TokenDto tokenDto = TokenDto.builder()
            .grantType("Bearer")
            .accessToken("access.token")
            .refreshToken("refresh.token")
            .build();

        when(userService.login("testUser", "password")).thenReturn(tokenDto);
        when(userService.getUserRoles("testUser")).thenReturn(List.of("ROLE_USER"));

        mockMvc.perform(post("/user/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(loginRequest)))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.grantType").value("Bearer"))
            .andExpect(jsonPath("$.accessToken").value("access.token"))
            .andExpect(jsonPath("$.userId").value("testUser"))
            .andExpect(cookie().httpOnly("refreshToken", true))
            .andExpect(cookie().value("refreshToken", "refresh.token"));
    }

    @Test
    @DisplayName("실패: 잘못된 자격증명으로 로그인 요청 시 401 Unauthorized")
    void login_Failure_InvalidCredentials() throws Exception {
        LoginRequestDto loginRequest = new LoginRequestDto();
        loginRequest.setUserId("testUser");
        loginRequest.setPassword("wrongPassword");

        when(userService.login(anyString(), anyString()))
            .thenThrow(new AuthenticationException("비밀번호가 일치하지 않습니다."));

        mockMvc.perform(post("/user/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(loginRequest)))
            .andExpect(status().isUnauthorized());
    }

    @Test
    @DisplayName("성공: 유효한 리프레시 토큰으로 토큰 재발급")
    void reissue_Success() throws Exception {
        LoginResponseDto responseDto = LoginResponseDto.builder()
            .grantType("Bearer").accessToken("new.access.token").build();
        when(userService.reissueAccessToken("valid.refresh.token")).thenReturn(responseDto);

        mockMvc.perform(post("/token/reissue")
                .cookie(new Cookie("refreshToken", "valid.refresh.token")))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.accessToken").value("new.access.token"));
    }

    @Test
    @DisplayName("실패: 리프레시 토큰 없이 재발급 요청 시 401 Unauthorized")
    void reissue_Failure_NoToken() throws Exception {
        mockMvc.perform(post("/token/reissue"))
            .andExpect(status().isUnauthorized())
            .andExpect(jsonPath("$").value("Refresh Token이 없습니다."));
    }

    @Test
    @DisplayName("실패: 유효하지 않은 리프레시 토큰으로 재발급 요청 시 401 Unauthorized 및 쿠키 삭제")
    void reissue_Failure_InvalidToken() throws Exception {
        when(userService.reissueAccessToken("invalid.token"))
            .thenThrow(new IllegalArgumentException("유효하지 않거나 만료된 Refresh Token 입니다."));

        mockMvc.perform(post("/token/reissue")
                .cookie(new Cookie("refreshToken", "invalid.token")))
            .andExpect(status().isUnauthorized())
            .andExpect(cookie().maxAge("refreshToken", 0))
            .andExpect(jsonPath("$").value("유효하지 않은 Refresh Token 입니다. 다시 로그인해주세요."));
    }
}
</file>

<file path="src/test/java/com/example/memory_guard/utils/jwt/JwtProviderTest.java">
package com.example.memory_guard.utils.jwt;

import com.example.memory_guard.global.auth.dto.TokenDto;
import com.example.memory_guard.global.auth.utils.JwtProvider;
import com.example.memory_guard.user.domain.Role;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.UserProfile;
import com.example.memory_guard.user.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import java.util.Optional;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class JwtProviderTest {

    @Mock
    private UserRepository userRepository;

    private JwtProvider jwtProvider;

    private final String testSecretKey = "dGVzdC1zZWNyZXQta2V5LWZvci1qd3QtdGVzdC1jYXNlLXRoaXMtaXMtc2VjcmV0LWtleQ==";
    private final long accessTokenExpiration = 1800000L;
    private final long refreshTokenExpiration = 1209600000L;

    private User mockUser;

    @BeforeEach
    void setUp() {
        jwtProvider = new JwtProvider(testSecretKey, accessTokenExpiration, refreshTokenExpiration, userRepository);

        UserProfile userProfile = UserProfile.builder()
            .userId("testUser")
            .username("테스트사용자")
            .password("encodedPassword")
            .build();
        mockUser = User.builder().userProfile(userProfile).build();
        mockUser.addRole(Role.builder().name("ROLE_USER").build());
    }

    @Test
    @DisplayName("토큰 생성 테스트 - 실제 User 객체 기반")
    void generateTokenTest() {
        Authentication authentication = new UsernamePasswordAuthenticationToken(
            mockUser,
            null,
            mockUser.getAuthorities()
        );

        TokenDto tokenDto = jwtProvider.generateToken(authentication);

        assertThat(tokenDto).isNotNull();
        assertThat(tokenDto.getGrantType()).isEqualTo("Bearer");
        assertThat(tokenDto.getAccessToken()).isNotNull();
        assertThat(jwtProvider.getUserIdFromToken(tokenDto.getAccessToken())).isEqualTo("testUser");
    }

    @Test
    @DisplayName("성공: 토큰에서 Authentication 객체 추출")
    void getAuthentication_Success() {
        String accessToken = jwtProvider.createAccessToken("testUser", "ROLE_USER");

        when(userRepository.findByUserProfileUserId("testUser")).thenReturn(Optional.of(mockUser));

        Authentication authentication = jwtProvider.getAuthentication(accessToken);

        assertThat(authentication).isNotNull();
        assertThat(authentication.getPrincipal()).isInstanceOf(User.class);
        assertThat(authentication.getPrincipal()).isEqualTo(mockUser); // Principal이 우리가 설정한 mockUser와 동일한지 확인
        assertThat(authentication.getAuthorities()).hasSize(1);
        assertThat(authentication.getAuthorities().iterator().next().getAuthority()).isEqualTo("ROLE_USER");
    }

    @Test
    @DisplayName("실패: 토큰에 해당하는 사용자가 DB에 없을 경우 예외 발생")
    void getAuthentication_UserNotFound() {
        String accessToken = jwtProvider.createAccessToken("ghostUser", "ROLE_USER");

        when(userRepository.findByUserProfileUserId("ghostUser")).thenReturn(Optional.empty());

        assertThatThrownBy(() -> jwtProvider.getAuthentication(accessToken))
            .isInstanceOf(UsernameNotFoundException.class)
            .hasMessage("사용자를 찾을 수 없습니다: ghostUser");

        verify(userRepository, times(1)).findByUserProfileUserId("ghostUser");
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/analysis/domain/DementiaAnalysis.java">
package com.example.memory_guard.analysis.domain;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import jakarta.persistence.*;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;


@Entity
@Getter
@NoArgsConstructor
public class DementiaAnalysis extends AbstractOverallAnalysis {

  private double dementiaProbability;

  private double speakingRate; // o

  private double utteranceVolume; // o

  private double avgSilenceDuration; // o

  private double vocabularyAccuracy; // o

  private double fillerFrequency;

  private double repetitionRatio;

  @Builder
  public DementiaAnalysis(AbstractAudioMetadata audioMetadata, double score1,
                          double speakingRate,
                          double utteranceVolume,
                          double avgSilenceDuration,
                          double vocabularyAccuracy,
                          double fillerFrequency,
                          double repetitionRatio,
                          double score, double dementiaProbability){
    super(audioMetadata, FeedbackType.DEMENTIA, score);
    this.speakingRate = speakingRate;
    this.utteranceVolume = utteranceVolume;
    this.avgSilenceDuration = avgSilenceDuration;
    this.vocabularyAccuracy = vocabularyAccuracy;
    this.fillerFrequency = fillerFrequency;
    this.repetitionRatio = repetitionRatio;
    this.dementiaProbability = dementiaProbability;
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/repository/AudioMetadataRepository.java">
package com.example.memory_guard.audio.repository;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.user.domain.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface AudioMetadataRepository extends JpaRepository<AbstractAudioMetadata, Long> {

  Optional<AbstractAudioMetadata> findById(Long id);

  List<AbstractAudioMetadata> findByUser(User user);

  List<AbstractAudioMetadata> findByUserOrderByCreatedAtDesc(User user);

  List<AbstractAudioMetadata> findByUserAndCreatedAtBetween(User user, LocalDateTime start, LocalDateTime end);

  Optional<AbstractAudioMetadata> findTopByUserOrderByCreatedAtDesc(User user);
}
</file>

<file path="src/main/java/com/example/memory_guard/diary/service/DiaryService.java">
package com.example.memory_guard.diary.service;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.domain.AudioTranscription;
import com.example.memory_guard.audio.repository.AudioTranscriptionRepository;
import com.example.memory_guard.global.ai.GeminiClient;
import com.example.memory_guard.diary.domain.Diary;
import com.example.memory_guard.diary.dto.DiaryContentDto;
import com.example.memory_guard.diary.dto.DiaryResponseDto;
import com.example.memory_guard.diary.repository.DiaryRepository;
import com.example.memory_guard.user.domain.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class DiaryService {

  private final DiaryRepository diaryRepository;
  private final AudioTranscriptionRepository audioTranscriptionRepository;
  private final GeminiClient geminiService;

  public Diary createAudioDiary(AbstractAudioMetadata abstractAudioMetadata, User user) throws IOException {
    Optional<Diary> existingDiary = diaryRepository.findByAudioMetadataId(abstractAudioMetadata.getId());

    if (existingDiary.isPresent()) {
      log.info("기존 음성 일기를 반환합니다. Diary ID: {}", existingDiary.get().getId());
      return existingDiary.get();
    }

    Diary audioDiary = generateDiary(abstractAudioMetadata, user);
    log.info("새로운 음성 일기가 생성되었습니다. Title: {}", audioDiary.getTitle());
    return diaryRepository.save(audioDiary);
  }
  public Diary generateDiary(AbstractAudioMetadata audioMetadata, User user) throws IOException {
    AudioTranscription transcription = audioTranscriptionRepository.findByAudioMetadataId(audioMetadata.getId())
        .orElseThrow(() -> new IllegalStateException("해당 오디오에 대한 텍스트 변환 데이터를 찾을 수 없습니다: " + audioMetadata.getId()));

    DiaryContentDto diaryContent = geminiService.summarizeTextToDiary(transcription.getText());

    return Diary.builder()
        .title(diaryContent.getTitle())
        .body(diaryContent.getBody())
        .author(user)
        .audioMetadata(audioMetadata)
        .build();
  }

  public Diary getDairyByAudioId(Long audioId) {
    return diaryRepository.findByAudioMetadataId(audioId)
        .orElseThrow(() -> new IllegalArgumentException("해당 오디오 ID에 맞는 다이어리를 찾을 수 없습니다: " + audioId));
  }

  public List<DiaryResponseDto> getUserDiaries(Long userId) {
    List<Diary> diaries = diaryRepository.findByAuthorId(userId);
    return diaries.stream()
        .map(diary -> DiaryResponseDto.builder()
            .title(diary.getTitle())
            .body(diary.getBody())
            .authorName(diary.getAuthor().getUserProfile().getUsername())
            .writtenAt(diary.getCreatedAt().toLocalDate())
            .build())
        .collect(Collectors.toList());
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/global/config/DataInitializer.java">
package com.example.memory_guard.global.config;

import com.example.memory_guard.user.domain.Role;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.UserProfile;
import com.example.memory_guard.user.repository.RoleRepository;
import com.example.memory_guard.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

@Component
@RequiredArgsConstructor
public class DataInitializer implements ApplicationRunner {

  private final RoleRepository roleRepository;
  private final UserRepository userRepository;
  private final PasswordEncoder passwordEncoder;

  @Override
  @Transactional
  public void run(ApplicationArguments args) throws Exception {
    Role userRole = roleRepository.findByName("ROLE_USER").orElseGet(() ->
        roleRepository.save(Role.builder().name("ROLE_USER").build())
    );
    Role guardRole = roleRepository.findByName("ROLE_GUARD").orElseGet(() ->
        roleRepository.save(Role.builder().name("ROLE_GUARD").build())
    );

    if (userRepository.findByUserProfileUserId("guard1").isEmpty()) {
      UserProfile guardianProfile = UserProfile.builder()
          .userId("guard1")
          .username("가디언1")
          .password(passwordEncoder.encode("guard1"))
          .build();
      User guardian = User.builder()
          .userProfile(guardianProfile)
          .build();
      guardian.addRole(guardRole);
      userRepository.save(guardian);

      if (userRepository.findByUserProfileUserId("user1").isEmpty()) {
        UserProfile userProfile = UserProfile.builder()
            .userId("user1")
            .username("사용자1")
            .password(passwordEncoder.encode("user1"))
            .build();
        User user = User.builder()
            .userProfile(userProfile)
            .build();
        user.addRole(userRole);

        guardian.addWard(user);

        userRepository.save(user);
      }
    }
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/dto/GuardUserDto.java">
package com.example.memory_guard.user.dto;

import com.example.memory_guard.user.domain.GuardUserLink;
import com.example.memory_guard.user.domain.User;
import lombok.Builder;
import lombok.Getter;

@Builder
@Getter
public class GuardUserDto {
    private Long id;
    private String userId;
    private String name;


    public static GuardUserDto fromEntity(User guard) {
        return GuardUserDto.builder()
                .id(guard.getId())
                .userId(guard.getUserProfile().getUserId())
                .name(guard.getUserProfile().getUsername())
                .build();
    }

    public static GuardUserDto fromEntity(GuardUserLink guardUserLink) {
        User guardian = guardUserLink.getGuardian();
        return GuardUserDto.builder()
                .id(guardian.getId())
                .userId(guardian.getUserProfile().getUserId())
                .name(guardian.getUserProfile().getUsername())
                .build();
    }
}
</file>

<file path="src/main/resources/application-dev.properties">
jwt.secret=V29vYWNvdXJzZUhvbWV3b3JrU2VjcmV0S2V5Rm9ySldUU2FtcGxlMQ==

spring.datasource.url=jdbc:mysql://localhost:3306/memory_guard?serverTimezone=Asia/Seoul&useSSL=false
spring.datasource.username=root
spring.datasource.password=4592
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update

ai.api.key=AIzaSyCff1IaU8LPPeSJdmOkHaYEu9f5Dx88rSw
ai.api.url=https://6c0a57b59961.ngrok-free.app

file.upload-dir: C:/Users/user/IdeaProjects/memory_guard/audio
</file>

<file path="build.gradle">
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'com.google.genai:google-genai:1.0.0'
	implementation("org:jaudiotagger:2.0.3")
	implementation 'net.bramp.ffmpeg:ffmpeg:0.7.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'

	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
}

tasks.withType(Test) {
	useJUnitPlatform()
}
</file>

<file path="docker-compose.yml">
version: '3.8'

services:
  app:
    image: junan01/memory_guard:2.1
    container_name: memory-guard-app
    ports:
      - "80:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod

      - JWT_SECRET=${JWT_SECRET}

      - SPRING_DATASOURCE_URL=${DB_URL}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}

      - AI_API_KEY=${AI_API_KEY}
      - AI_API_URL=${AI_API_URL}

      - FILE_UPLOAD_DIR=${UPLOAD_DIR}
    restart: always
</file>

<file path="src/main/java/com/example/memory_guard/audio/domain/AbstractAudioMetadata.java">
package com.example.memory_guard.audio.domain;

  import com.example.memory_guard.analysis.domain.AbstractOverallAnalysis;
  import com.example.memory_guard.analysis.domain.SentenceAnalysisIndicators;
  import com.example.memory_guard.user.domain.User;
  import jakarta.persistence.*;
  import lombok.AccessLevel;
  import lombok.Getter;
  import lombok.NoArgsConstructor;
  import org.springframework.data.annotation.CreatedDate;
  import org.springframework.data.annotation.LastModifiedDate;
  import org.springframework.data.jpa.domain.support.AuditingEntityListener;

  import java.io.File;
  import java.io.IOException;
  import java.time.LocalDateTime;
  import java.util.List;

  @Entity
  @Getter
  @NoArgsConstructor(access = AccessLevel.PROTECTED)
  @Inheritance(strategy = InheritanceType.JOINED)
  @DiscriminatorColumn(name = "storage_type")
  @EntityListeners(AuditingEntityListener.class)
  public abstract class AbstractAudioMetadata {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", updatable = false)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(name = "original_filename")
    private String originalFilename;

    @Column(name = "file_size")
    private Long fileSize;

    @Column(name = "duration")
    private Long duration;

    @OneToMany(mappedBy = "audioMetadata")
    private List<AbstractOverallAnalysis> evaluationFeedbacks;

    @OneToMany(mappedBy = "audioMetadata")
    private List<SentenceAnalysisIndicators> sentenceAnalysisIndicators;

    @CreatedDate
    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @LastModifiedDate
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    public AbstractAudioMetadata(User user, String originalFilename, Long fileSize, Long duration) {
      this.user = user;
      this.originalFilename = originalFilename;
      this.fileSize = fileSize;
      this.duration = duration;
    }

    public void updateFileInfo(String originalFilename, Long fileSize, Long duration) {
      this.originalFilename = originalFilename;
      this.fileSize = fileSize;
      this.duration = duration;
    }

    public abstract File getFile() throws IOException;
  }
</file>

<file path="src/main/resources/application.properties">
spring.application.name=memory_guard
spring.profiles.active=dev

jwt.access-token-expiration-millis=9000000
jwt.refresh-token-expiration-millis=604800000
jwt.refresh-token-expiration-seconds=604800

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.sql.init.mode=never

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
</file>

<file path="src/test/java/com/example/memory_guard/controller/AudioControllerTest.java">
package com.example.memory_guard.controller;

import com.example.memory_guard.audio.controller.AudioController;
import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.domain.LocalAudioMetadata;
import com.example.memory_guard.audio.repository.AudioMetadataRepository;
import com.example.memory_guard.audio.service.AudioService;
import com.example.memory_guard.diary.domain.Diary;
import com.example.memory_guard.diary.service.DiaryService;
import com.example.memory_guard.global.exception.GlobalExceptionHandler;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.UserProfile;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.jpa.mapping.JpaMetamodelMappingContext;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.time.LocalDateTime;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

@WebMvcTest(controllers = {AudioController.class, GlobalExceptionHandler.class}, 
    excludeAutoConfiguration = {SecurityAutoConfiguration.class})
@MockBean(JpaMetamodelMappingContext.class)
@ActiveProfiles("test")
class AudioControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockitoBean
    private AudioService audioService;

    @MockitoBean
    private DiaryService diaryService;

    @MockitoBean
    private AudioMetadataRepository audioMetadataRepository;

    @Autowired
    private ObjectMapper objectMapper;

    private MockMultipartFile mockAudioFile;
    private User testUser;
    private AbstractAudioMetadata mockAudioMetadata;

    @BeforeEach
    void setUp() {
        mockAudioFile = new MockMultipartFile(
            "audioFile",
            "test.wav",
            "audio/wav",
            "test audio content".getBytes()
        );

        UserProfile userProfile = UserProfile.builder()
            .userId("testUser")
            .username("테스트사용자")
            .password("password")
            .build();
        
        testUser = User.builder()
            .userProfile(userProfile)
            .build();

        mockAudioMetadata = LocalAudioMetadata.builder()
            .user(testUser)
            .originalFilename("test.wav")
            .fileSize(1024L)
            .duration(0L)
            .filePath("/path/to/test.wav")
            .build();
    }

    @Test
    @DisplayName("성공: 오디오 파일 업로드 및 평가")
    void audioEvaluation_Success() throws Exception {
        doNothing().when(audioService).processNewAudio(any(), any(User.class));

        mockMvc.perform(multipart("/api/ward/audio/evaluation")
                .file(mockAudioFile)
                .with(request -> {
                    request.setUserPrincipal(() -> "testUser");
                    return request;
                }))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(content().string("오디오 파일이 성공적으로 저장되었습니다."));

        verify(audioService).processNewAudio(any(), any(User.class));
    }

    @Test
    @DisplayName("실패: 빈 오디오 파일 업로드")
    void audioEvaluation_EmptyFile() throws Exception {
        MockMultipartFile emptyFile = new MockMultipartFile(
            "audioFile",
            "empty.wav",
            "audio/wav",
            new byte[0]
        );

        mockMvc.perform(multipart("/api/ward/audio/evaluation")
                .file(emptyFile)
                .with(request -> {
                    request.setUserPrincipal(() -> "testUser");
                    return request;
                }))
                .andDo(print())
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.code").value("INVALID_ARGUMENT"))
                .andExpect(jsonPath("$.message").value("오디오가 비어있어요."));

        verify(audioService, never()).processNewAudio(any(), any(User.class));
    }

    @Test
    @DisplayName("실패: 오디오 저장 중 IOException 발생")
    void audioEvaluation_IOException() throws Exception {
        doThrow(new IOException("파일 저장 실패"))
            .when(audioService).processNewAudio(any(), any(User.class));

        mockMvc.perform(multipart("/api/ward/audio/evaluation")
                .file(mockAudioFile)
                .with(request -> {
                    request.setUserPrincipal(() -> "testUser");
                    return request;
                }))
                .andDo(print())
                .andExpect(status().isInternalServerError())
                .andExpect(jsonPath("$.code").value("FILE_IO_ERROR"));

        verify(audioService).processNewAudio(any(), any(User.class));
    }

    @Test
    @DisplayName("실패: 오디오 저장 중 일반 예외 발생")
    void audioEvaluation_GeneralException() throws Exception {
        doThrow(new RuntimeException("예상치 못한 오류"))
            .when(audioService).processNewAudio(any(), any(User.class));

        mockMvc.perform(multipart("/api/ward/audio/evaluation")
                .file(mockAudioFile)
                .with(request -> {
                    request.setUserPrincipal(() -> "testUser");
                    return request;
                }))
                .andDo(print())
                .andExpect(status().isInternalServerError())
                .andExpect(jsonPath("$.code").value("INTERNAL_SERVER_ERROR"))
                .andExpect(jsonPath("$.message").value("서버 오류"));

        verify(audioService).processNewAudio(any(), any(User.class));
    }

    @Test
    @DisplayName("실패: audioFile 파라미터 누락")
    void audioEvaluation_MissingAudioFileParameter() throws Exception {
        mockMvc.perform(multipart("/api/ward/audio/evaluation")
                .with(request -> {
                    request.setUserPrincipal(() -> "testUser");
                    return request;
                }))
                .andDo(print())
                .andExpect(status().is5xxServerError());

        verify(audioService, never()).processNewAudio(any(), any(User.class));
    }

    @Test
    @DisplayName("성공: 다양한 오디오 파일 형식 업로드")
    void audioEvaluation_DifferentAudioFormats() throws Exception {
        MockMultipartFile mp3File = new MockMultipartFile(
            "audioFile",
            "test.mp3",
            "audio/mpeg",
            "test mp3 content".getBytes()
        );

        doNothing().when(audioService).processNewAudio(any(), any(User.class));

        mockMvc.perform(multipart("/api/ward/audio/evaluation")
                .file(mp3File)
                .with(request -> {
                    request.setUserPrincipal(() -> "testUser");
                    return request;
                }))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(content().string("오디오 파일이 성공적으로 저장되었습니다."));

        verify(audioService).processNewAudio(any(), any(User.class));
    }

    @Test
    @DisplayName("성공: 큰 오디오 파일 업로드")
    void audioEvaluation_LargeFile() throws Exception {
        byte[] largeContent = new byte[1024 * 1024];
        MockMultipartFile largeFile = new MockMultipartFile(
            "audioFile",
            "large.wav",
            "audio/wav",
            largeContent
        );

        doNothing().when(audioService).processNewAudio(any(), any(User.class));

        mockMvc.perform(multipart("/api/ward/audio/evaluation")
                .file(largeFile)
                .with(request -> {
                    request.setUserPrincipal(() -> "testUser");
                    return request;
                }))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(content().string("오디오 파일이 성공적으로 저장되었습니다."));

        verify(audioService).processNewAudio(any(), any(User.class));
    }

  @Test
  @DisplayName("성공: 오디오 ID로 오디오 파일과 일기를 함께 조회한다")
  void playAudio_Success() throws Exception {
    Long audioId = 1L;

    File tempFile = Files.createTempFile("test-audio", ".wav").toFile();
    tempFile.deleteOnExit();

    UserProfile userProfile = UserProfile.builder().userId("testUser").username("테스트사용자").build();
    User author = User.builder().userProfile(userProfile).build();

    Diary mockDiary = mock(Diary.class);
    when(mockDiary.getTitle()).thenReturn("테스트 일기");
    when(mockDiary.getBody()).thenReturn("이것은 테스트 내용입니다.");
    when(mockDiary.getAuthor()).thenReturn(author);
    when(mockDiary.getCreatedAt()).thenReturn(LocalDateTime.now());

    when(audioService.getFile(audioId)).thenReturn(tempFile);
    when(audioService.getDairyByAudioId(audioId)).thenReturn(mockDiary);

    mockMvc.perform(get("/api/ward/audio/play/{audioId}", audioId))
        .andExpect(status().isOk())
        .andExpect(content().contentTypeCompatibleWith(MediaType.MULTIPART_FORM_DATA));

    verify(audioService, times(1)).getFile(audioId);
    verify(audioService, times(1)).getDairyByAudioId(audioId);
  }

  @Test
  @DisplayName("실패: 존재하지 않는 오디오 ID로 조회 시 404 Not Found")
  void playAudio_Failure_NotFound() throws Exception {
    Long nonExistentAudioId = 999L;
    when(audioService.getFile(nonExistentAudioId)).thenThrow(new IOException("파일을 찾을 수 없습니다."));

    mockMvc.perform(get("/api/ward/audio/play/{audioId}", nonExistentAudioId))
        .andExpect(status().isInternalServerError());
  }

}
</file>

<file path="src/test/java/com/example/memory_guard/service/UserServiceTest.java">
package com.example.memory_guard.service;

import com.example.memory_guard.global.auth.dto.TokenDto;
import com.example.memory_guard.global.exception.custom.AuthenticationException;
import com.example.memory_guard.global.exception.custom.InvalidRequestException;
import com.example.memory_guard.user.dto.GuardSignupRequestDto;
import com.example.memory_guard.user.dto.LoginResponseDto;
import com.example.memory_guard.user.dto.SignupRequestDto;
import com.example.memory_guard.user.domain.Role;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.UserProfile;
import com.example.memory_guard.user.repository.RoleRepository;
import com.example.memory_guard.user.repository.UserRepository;
import com.example.memory_guard.user.service.UserService;
import com.example.memory_guard.global.auth.utils.JwtProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Optional;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class UserServiceTest {

    @Mock
    private UserRepository userRepository;

    @Mock
    private RoleRepository roleRepository;

    @Mock
    private PasswordEncoder passwordEncoder;

    @Mock
    private JwtProvider jwtProvider;

    @InjectMocks
    private UserService userService;

    private Role userRole;
    private Role guardRole;
    private User wardUser;

    @BeforeEach
    void setUp() {
        userRole = Role.builder().name("ROLE_USER").build();
        guardRole = Role.builder().name("ROLE_GUARD").build();
        
        UserProfile wardProfile = UserProfile.builder()
            .userId("ward1")
            .username("피보호자1")
            .password("encodedPassword")
            .build();
        wardUser = User.builder()
            .userProfile(wardProfile)
            .build();
        wardUser.addRole(userRole);
    }

    @Test
    @DisplayName("성공: 정상적인 보호자 회원가입")
    void guardSignup_Success() {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        when(userRepository.findByUserProfileUserId("guard1")).thenReturn(Optional.empty());
        when(userRepository.existsByUserProfileUsername("보호자1")).thenReturn(false);
        when(userRepository.findByUserProfileUserId("ward1")).thenReturn(Optional.of(wardUser));
        when(roleRepository.findByName("ROLE_GUARD")).thenReturn(Optional.of(guardRole));
        when(passwordEncoder.encode("password123")).thenReturn("encodedPassword");

        userService.guardSignup(request);

        verify(userRepository).save(any(User.class));
        verify(passwordEncoder).encode("password123");
    }

    @Test
    @DisplayName("실패: 중복된 userId로 보호자 회원가입")
    void guardSignup_DuplicateUserId() {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        UserProfile existingProfile = UserProfile.builder()
            .userId("guard1")
            .username("기존사용자")
            .password("password")
            .build();
        User existingUser = User.builder()
            .userProfile(existingProfile)
            .build();

        when(userRepository.findByUserProfileUserId("guard1")).thenReturn(Optional.of(existingUser));

        assertThatThrownBy(() -> userService.guardSignup(request))
            .isInstanceOf(InvalidRequestException.class)
            .hasMessage("이미 존재하는 사용자 ID입니다.");
    }

    @Test
    @DisplayName("실패: 중복된 username으로 보호자 회원가입")
    void guardSignup_DuplicateUsername() {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        when(userRepository.findByUserProfileUserId("guard1")).thenReturn(Optional.empty());
        when(userRepository.existsByUserProfileUsername("보호자1")).thenReturn(true);

        assertThatThrownBy(() -> userService.guardSignup(request))
            .isInstanceOf(InvalidRequestException.class)
            .hasMessage("이미 존재하는 사용자명입니다.");
    }

    @Test
    @DisplayName("실패: 존재하지 않는 피보호자 username")
    void guardSignup_WardNotFound() {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("nonexistent");

        when(userRepository.findByUserProfileUserId("guard1")).thenReturn(Optional.empty());
        when(userRepository.existsByUserProfileUsername("보호자1")).thenReturn(false);
        when(userRepository.findByUserProfileUserId("nonexistent")).thenReturn(Optional.empty());

        assertThatThrownBy(() -> userService.guardSignup(request))
            .isInstanceOf(InvalidRequestException.class)
            .hasMessage("존재하지 않는 피보호자입니다.");
    }

    @Test
    @DisplayName("실패: 피보호자가 ROLE_USER 권한이 없음")
    void guardSignup_WardHasNoUserRole() {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        UserProfile wardWithoutUserRoleProfile = UserProfile.builder()
            .userId("ward1")
            .username("피보호자1")
            .password("encodedPassword")
            .build();
        User wardWithoutUserRole = User.builder()
            .userProfile(wardWithoutUserRoleProfile)
            .build();

        when(userRepository.findByUserProfileUserId("guard1")).thenReturn(Optional.empty());
        when(userRepository.existsByUserProfileUsername("보호자1")).thenReturn(false);
        when(userRepository.findByUserProfileUserId("ward1")).thenReturn(Optional.of(wardWithoutUserRole));

        assertThatThrownBy(() -> userService.guardSignup(request))
            .isInstanceOf(InvalidRequestException.class)
            .hasMessage("해당 사용자는 피보호자 권한이 없습니다.");
    }

    @Test
    @DisplayName("실패: ROLE_GUARD가 데이터베이스에 존재하지 않음")
    void guardSignup_GuardRoleNotFound() {
        GuardSignupRequestDto request = new GuardSignupRequestDto();
        request.setUserId("guard1");
        request.setUsername("보호자1");
        request.setPassword("password123");
        request.setWardUserId("ward1");

        when(userRepository.findByUserProfileUserId("guard1")).thenReturn(Optional.empty());
        when(userRepository.existsByUserProfileUsername("보호자1")).thenReturn(false);
        when(userRepository.findByUserProfileUserId("ward1")).thenReturn(Optional.of(wardUser));
        when(roleRepository.findByName("ROLE_GUARD")).thenReturn(Optional.empty());

        assertThatThrownBy(() -> userService.guardSignup(request))
            .isInstanceOf(IllegalStateException.class)
            .hasMessage("ROLE_GUARD가 존재하지 않습니다.");
    }

    @Test
    @DisplayName("성공: 정상적인 피보호자 회원가입")
    void signup_Success() {
        SignupRequestDto request = new SignupRequestDto();
        request.setUserId("user1");
        request.setUsername("사용자1");
        request.setPassword("password123");

        when(userRepository.findByUserProfileUserId("user1")).thenReturn(Optional.empty());
        when(userRepository.existsByUserProfileUsername("사용자1")).thenReturn(false);
        when(roleRepository.findByName("ROLE_USER")).thenReturn(Optional.of(userRole));
        when(passwordEncoder.encode("password123")).thenReturn("encodedPassword");

        userService.signup(request);

        verify(userRepository).save(any(User.class));
        verify(passwordEncoder).encode("password123");
    }

    @Test
    @DisplayName("실패: 중복된 userId로 피보호자 회원가입")
    void signup_DuplicateUserId() {
        SignupRequestDto request = new SignupRequestDto();
        request.setUserId("user1");
        request.setUsername("사용자1");
        request.setPassword("password123");

        UserProfile existingProfile = UserProfile.builder()
            .userId("user1")
            .username("기존사용자")
            .password("password")
            .build();
        User existingUser = User.builder()
            .userProfile(existingProfile)
            .build();

        when(userRepository.findByUserProfileUserId("user1")).thenReturn(Optional.of(existingUser));

        assertThatThrownBy(() -> userService.signup(request))
            .isInstanceOf(InvalidRequestException.class)
            .hasMessage("이미 존재하는 사용자 ID입니다.");
    }

    @Test
    @DisplayName("실패: 중복된 username으로 피보호자 회원가입")
    void signup_DuplicateUsername() {
        SignupRequestDto request = new SignupRequestDto();
        request.setUserId("user1");
        request.setUsername("사용자1");
        request.setPassword("password123");

        when(userRepository.findByUserProfileUserId("user1")).thenReturn(Optional.empty());
        when(userRepository.existsByUserProfileUsername("사용자1")).thenReturn(true);

        assertThatThrownBy(() -> userService.signup(request))
            .isInstanceOf(InvalidRequestException.class)
            .hasMessage("이미 존재하는 사용자명입니다.");
    }

    @Test
    @DisplayName("성공: 정상적인 로그인")
    void login_Success() {
        String userId = "testUser";
        String rawPassword = "password";
        String encodedPassword = "encodedPassword";

        UserProfile userProfile = UserProfile.builder().userId(userId).password(encodedPassword).build();
        User user = User.builder().userProfile(userProfile).build();
        user.addRole(Role.builder().name("ROLE_USER").build());

        TokenDto tokenDto = TokenDto.builder().accessToken("access").refreshToken("refresh").grantType("Bearer").build();

        when(userRepository.findByUserProfileUserId(userId)).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(rawPassword, encodedPassword)).thenReturn(true);
        when(jwtProvider.generateToken(any(Authentication.class))).thenReturn(tokenDto);

        TokenDto result = userService.login(userId, rawPassword);

        assertThat(result).isNotNull();
        assertThat(result.getAccessToken()).isEqualTo("access");
        verify(userRepository, times(1)).findByUserProfileUserId(userId);
        verify(passwordEncoder, times(1)).matches(rawPassword, encodedPassword);
        verify(jwtProvider, times(1)).generateToken(any(Authentication.class));
    }

    @Test
    @DisplayName("실패: 존재하지 않는 ID로 로그인")
    void login_Fail_UserNotFound() {
        when(userRepository.findByUserProfileUserId(anyString())).thenReturn(Optional.empty());

        assertThatThrownBy(() -> userService.login("nonexistent", "password"))
            .isInstanceOf(AuthenticationException.class)
            .hasMessage("존재하지 않는 사용자 ID입니다.");
    }

    @Test
    @DisplayName("실패: 비밀번호 불일치로 로그인 실패")
    void login_Fail_PasswordMismatch() {
        String userId = "testUser";
        String rawPassword = "wrongPassword";
        String encodedPassword = "encodedPassword";
        UserProfile userProfile = UserProfile.builder().userId(userId).password(encodedPassword).build();
        User user = User.builder().userProfile(userProfile).build();

        when(userRepository.findByUserProfileUserId(userId)).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(rawPassword, encodedPassword)).thenReturn(false);

        assertThatThrownBy(() -> userService.login(userId, rawPassword))
            .isInstanceOf(AuthenticationException.class)
            .hasMessage("비밀번호가 일치하지 않습니다.");
    }

    @Test
    @DisplayName("성공: 유효한 리프레시 토큰으로 액세스 토큰 재발급")
    void reissueAccessToken_Success() {
        String refreshToken = "valid.refresh.token";
        String userId = "testUser";
        String newAccessToken = "new.access.token";

        UserProfile userProfile = UserProfile.builder().userId(userId).username("테스트").password("pass").build();
        User user = User.builder().userProfile(userProfile).build();
        user.addRole(Role.builder().name("ROLE_USER").build());

        when(jwtProvider.validateToken(refreshToken)).thenReturn(true);
        when(jwtProvider.getUserIdFromToken(refreshToken)).thenReturn(userId);
        when(userRepository.findByUserProfileUserId(userId)).thenReturn(Optional.of(user));
        when(jwtProvider.createAccessToken(eq(userId), anyString())).thenReturn(newAccessToken);

        LoginResponseDto responseDto = userService.reissueAccessToken(refreshToken);

        assertThat(responseDto).isNotNull();
        assertThat(responseDto.getAccessToken()).isEqualTo(newAccessToken);
    }

    @Test
    @DisplayName("실패: 유효하지 않은 리프레시 토큰으로 재발급 요청")
    void reissueAccessToken_Fail_InvalidToken() {
        String invalidToken = "invalid.token";
        when(jwtProvider.validateToken(invalidToken)).thenReturn(false);

        assertThatThrownBy(() -> userService.reissueAccessToken(invalidToken))
            .isInstanceOf(IllegalArgumentException.class)
            .hasMessage("유효하지 않거나 만료된 Refresh Token 입니다.");
    }
}
</file>

<file path="README.md">
## DB ERD
https://www.erdcloud.com/d/SJiLvMtFndTPs4hyX


## 공유 할 부분 

### **1.  API 에러 핸들링 컨벤션**

 `GlobalExceptionHandler`가 설정되어 있어, 컨트롤러에서 발생하는 대부분의 예외를 일관된 형식으로 처리합니다.

-   **이렇게 해주세요 (Do) 👍**
    -   컨트롤러에서는 `try-catch` 문을 사용하지 마세요.
    -   서비스(Service) 계층에서 비즈니스 로직 검증에 실패했을 경우, 상황에 맞는 예외를 `throw` 해주세요. 핸들러가 알아서 잡아 HTTP 상태 코드와 표준 에러 메시지를 생성합니다.

    **[Before 👎]**
    ```java
    // UserController.java
    @PostMapping("/user/login")
    public ResponseEntity<?> login(@RequestBody LoginRequestDto loginDto) {
        try {
            TokenDto tokenInfo = userService.login(loginDto.getUserId(), loginDto.getPassword());
            // ... 생략 ...
            return ResponseEntity.ok(loginResponseDto);
        } catch (AuthenticationException e) {
            ErrorResponse response = new ErrorResponse("AUTH_FAILED", e.getMessage());
            return new ResponseEntity<>(response, HttpStatus.UNAUTHORIZED);
        }
    }
    ```
    **[After 👍]**
    ```java
    // UserController.java
    @PostMapping("/user/login")
    public ResponseEntity<LoginResponseDto> login(@RequestBody LoginRequestDto loginDto) {
        // userService.login 내부에서 예외가 발생하면 GlobalExceptionHandler가 처리합니다.
        TokenDto tokenInfo = userService.login(loginDto.getUserId(), loginDto.getPassword());
        // ... 생략 ...
        return ResponseEntity.ok(loginResponseDto);
    }
    ```

-   **새로운 예외 추가가 필요하다면?**
    -   만약 처리해야 할 새로운 종류의 예외가 있다면 `GlobalExceptionHandler.java` 파일에 `@ExceptionHandler`를 추가하여 등록해주세요.

### ** JWT 인증/인가 테스트 방법**

로컬에서 개발 및 테스트의 편의를 위해 현재는 모든 API 요청이 허용된 상태입니다. 실제 JWT 인증/인가 로직을 테스트하려면 간단한 주석 해제가 필요합니다.

-   **파일 위치**: `src/main/java/com/example/memory_guard/global/config/SecurityConfig.java`
-   **활성화 방법**: 아래 코드 블록의 주석을 제거하고, 그 아래의 `requestMatchers("/**").permitAll()` 부분을 주석 처리하거나 삭제해 주세요.

    ```java
    // SecurityConfig.java
    
    // 이 부분의 주석을 해제하세요!
    .authorizeHttpRequests(auth -> auth
        .requestMatchers("/", "/user/login", "/guard/login", "/token/reissue").permitAll()
        .requestMatchers("/api/ward/**").hasRole("USER") // 피보호자 API는 ROLE_USER 필요
        .requestMatchers("/api/guard/**").hasRole("GUARD") // 보호자 API는 ROLE_GUARD 필요
        .anyRequest().authenticated()
    )
    /*
    // 이 부분은 주석 처리 또는 삭제하세요!
    .authorizeHttpRequests(auth -> auth
        .requestMatchers("/**").permitAll()
        .anyRequest().authenticated()
    )
    */
    ```
-   **참고**: 활성화 후 API를 테스트할 때는 Postman 등의 클라이언트에서 **`Authorization` 헤더에 `Bearer {AccessToken}`**을 포함하여 요청해야 합니다.

### ** 초기 데이터 안내**

-   **피보호자 (ROLE_USER) 계정**
    -   **ID**: `user1`
    -   **Password**: `user1`

-   **보호자 (ROLE_GUARD) 계정**
    -   **ID**: `guard1`
    -   **Password**: `guard1`
    -   **참고**: `guard1` 계정은 `user1` 계정과 자동으로 연결(피보호자-보호자 관계)되어 있습니다.

---
</file>

<file path="src/main/java/com/example/memory_guard/global/ai/AiModelClient.java">
package com.example.memory_guard.global.ai;

import com.example.memory_guard.analysis.dto.AiEvaluateApiResponse;
import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.dto.request.AudioAnalysisRequestDto;
import com.example.memory_guard.audio.dto.request.SpeakSentenceRequestDto;
import com.example.memory_guard.audio.dto.response.SpeakSentenceResponseDto;
import com.example.memory_guard.audio.utils.AudioConversionUtils;
import com.example.memory_guard.analysis.dto.OverallAnalysisResponseDto;
import com.example.memory_guard.audio.dto.response.AudioTranscriptionResponseDto;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Base64;

@Service
@Slf4j
public class AiModelClient {

  private final WebClient webClient;
  private final AudioConversionUtils audioConversionUtils;

  public AiModelClient(@Value("${ai.api.url}") String apiUrl, AudioConversionUtils audioConversionUtils) {
    this.webClient = WebClient.builder()
        .baseUrl(apiUrl)
        .build();
    this.audioConversionUtils = audioConversionUtils;
  }

  public OverallAnalysisResponseDto analyzeAudio(AbstractAudioMetadata audioMetadata) throws IOException {
    File file = audioMetadata.getFile();
    String fileName = file.getName();
    String base64AudioData = encodeToBase64(file);

    log.info("AI 서버로 음성 분석 요청을 보냅니다. fileName: {}", fileName);

    AudioAnalysisRequestDto requestDto = createAudioRequestDto(base64AudioData, fileName);

    AiEvaluateApiResponse apiResponse = sendHttpJsonRequest("/audio/evaluate", requestDto, AiEvaluateApiResponse.class);

    if(apiResponse !=null&&apiResponse.isSuccess()&&apiResponse.getData()!=null) {
    return apiResponse.getData();
  } else {
    log.error("AI 서버로부터 분석 데이터를 받는데 실패했습니다. 응답: {}", apiResponse);
    throw new RuntimeException("AI 서버 분석 실패: " + (apiResponse != null ? apiResponse.getMessage() : "응답 없음"));
  }
}

//public OverallAnalysisResponseDto analyzeAudio(AbstractAudioMetadata audioMetadata) throws IOException {
//  log.info("AI 서버로 음성 분석 요청을 보냅니다 (테스트용 더미 데이터 반환)");
//
//  OverallAnalysisResponseDto response = new OverallAnalysisResponseDto();
//  response.setScore(85.5);
//  response.setSpeakingRate(150.0);
//  response.setUtteranceVolume(70.0);
//  response.setAvgSilenceDuration(0.5);
//  response.setVocabularyAccuracy(90.0);
//  response.setFillerFrequency(2.0);
//  response.setRepetitionRatio(5.0);
//
//    return response;
//  }


  public OverallAnalysisResponseDto analyzeAudio(MultipartFile multipartFile) {
    String fileName = multipartFile.getOriginalFilename();
    String base64AudioData = encodeToBase64(multipartFile);
    
    log.info("AI 서버로 음성 분석 요청을 보냅니다. fileName: {}", fileName);

    AudioAnalysisRequestDto requestDto = createAudioRequestDto(base64AudioData, fileName);

    return sendHttpJsonRequest("/audio/evaluate", requestDto, OverallAnalysisResponseDto.class);
  }


  public AudioTranscriptionResponseDto extractAudioText(MultipartFile
                                                            multipartFile){
    String fileName = multipartFile.getOriginalFilename();
    String base64AudioData = encodeToBase64(multipartFile);

    log.info("AI 서버로 음성 변환 요청");

    AudioAnalysisRequestDto requestDto = createAudioRequestDto(base64AudioData, fileName);

    return sendHttpJsonRequest("/audio/translate/text", requestDto, AudioTranscriptionResponseDto.class);
  }

  public AudioTranscriptionResponseDto extractAudioText(AbstractAudioMetadata metadata) throws IOException {
    File file = metadata.getFile();
    String fileName = file.getName();
    String base64AudioData = encodeToBase64(file);

    log.info("AI 서버로 음성 변환 요청");
    log.info("fileName: {}", fileName);
    AudioAnalysisRequestDto requestDto = createAudioRequestDto(base64AudioData, fileName);

    return sendHttpJsonRequest("/audio/translate/text", requestDto, AudioTranscriptionResponseDto.class);
  }

//  public AudioTranscriptionResponseDto extractAudioText(AbstractAudioMetadata metadata) throws IOException {
//    return AudioTranscriptionResponseDto.builder()
//        .audioId(2L)
//        .audioText("나는 오늘 학교를 가는데 비가 많이 왔었다.\n" +
//            "그래서 우산을 챙기지 않았기 때문에 옷이 다 젖어버린다.\n" +
//            "친구가 나를 보면서 \"왜 이렇게 젖은거니?\" 하고 웃었었다.\n" +
//            "나는 그냥 집에 가고 싶었다, 근데 수업이 이미 시작했었다.")
//        .build();
//  }

//  public SpeakSentenceResponseDto speakSentenceProcess(MultipartFile audioFile, String sentence) throws IOException {
//    log.info("AI 서버로 따라말하기 비교 요청 더미데이터 반환.");
//
//    return SpeakSentenceResponseDto.builder().synchronization(80).build();
//  }

  public SpeakSentenceResponseDto speakSentenceProcess(MultipartFile audioFile, String sentence) throws IOException {
    String tempOutputPath = System.getProperty("java.io.tmpdir") + "/" + System.currentTimeMillis() + ".wav";
    File convertedWavFile = null;

    try {
      convertedWavFile = audioConversionUtils.convertToWav(audioFile, tempOutputPath);
      String fileName = convertedWavFile.getName();
      String base64AudioData = encodeToBase64(convertedWavFile);

      log.info("AI 서버로 따라말하기 비교 요청을 보냅니다. fileName: {}, sentence: {}", fileName, sentence);

      SpeakSentenceRequestDto requestDto = createSpeakSentenceRequestDto(base64AudioData, fileName, sentence);

      return sendSpeakSentenceRequest("/audio/speak/sentence", requestDto, SpeakSentenceResponseDto.class);

    } finally {
      if (convertedWavFile != null && convertedWavFile.exists()) {
        convertedWavFile.delete();
      }
    }
  }


  private <T> T sendHttpJsonRequest(String requestUrl, AudioAnalysisRequestDto requestDto, Class<T> responseType) {
    return webClient.post()
        .uri(requestUrl)
        .contentType(MediaType.APPLICATION_JSON)
        .body(BodyInserters.fromValue(requestDto))
        .retrieve()
        .bodyToMono(responseType)
        .doOnSuccess(response -> log.info("AI 모델로부터 응답 수신 성공"))
        .doOnError(error -> log.error("AI 모델 요청 중 오류 발생", error))
        .block();
  }

  private <T> T sendSpeakSentenceRequest(String requestUrl, SpeakSentenceRequestDto requestDto, Class<T> responseType) {
    return webClient.post()
        .uri(requestUrl)
        .contentType(MediaType.APPLICATION_JSON)
        .body(BodyInserters.fromValue(requestDto))
        .retrieve()
        .bodyToMono(responseType)
        .doOnSuccess(response -> log.info("AI 모델로부터 따라말하기 응답 수신 성공"))
        .doOnError(error -> log.error("AI 모델 따라말하기 요청 중 오류 발생", error))
        .block();
  }

  private String encodeToBase64(MultipartFile multipartFile) {
    try {
      byte[] fileBytes = multipartFile.getBytes();
      return Base64.getEncoder().encodeToString(fileBytes);
    } catch (IOException e) {
      throw new RuntimeException("파일 인코딩 실패", e);
    }
  }

  private String encodeToBase64(File file) {
    try {
      byte[] fileContent = Files.readAllBytes(file.toPath());
      return Base64.getEncoder().encodeToString(fileContent);
    } catch (IOException e) {
      throw new RuntimeException("파일 인코딩 실패", e);
    }
  }

  private static AudioAnalysisRequestDto createAudioRequestDto(String base64AudioData, String fileName) {
    return AudioAnalysisRequestDto.builder()
        .audioData(base64AudioData)
        .filename(fileName)
        .build();
  }

  private static SpeakSentenceRequestDto createSpeakSentenceRequestDto(String base64AudioData, String fileName, String sentence) {
    return SpeakSentenceRequestDto.builder()
        .audioData(base64AudioData)
        .filename(fileName)
        .sentence(sentence)
        .build();
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/controller/UserSettingController.java">
package com.example.memory_guard.user.controller;

import com.example.memory_guard.user.domain.Status;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.dto.GuardManagementResponseDto;
import com.example.memory_guard.user.dto.GuardRequestDto;
import com.example.memory_guard.user.dto.GuardUserDto;
import com.example.memory_guard.user.service.UserSettingService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/user")
public class UserSettingController {

    private final UserSettingService userSettingService;

    @GetMapping("/setting")
    public ResponseEntity<List<GuardUserDto>> getAllGuards(
            @AuthenticationPrincipal User ward
    ) {
        return ResponseEntity.ok(userSettingService.getAllGuards(ward));
    }

    @GetMapping("/management")
    public ResponseEntity<GuardManagementResponseDto> getManagement(
            @AuthenticationPrincipal User ward
    ) {
        return ResponseEntity.ok(userSettingService.getManagement(ward));
    }

    @GetMapping("/search-guard")
    public ResponseEntity<Optional<GuardUserDto>> getWard(
            @RequestParam String userId
    ) {
        return ResponseEntity.ok(userSettingService.getGuard(userId));
    }

    @PostMapping("/enroll-guard")
    public ResponseEntity<?> addWard(
            @AuthenticationPrincipal User user,
            @RequestBody GuardRequestDto guardRequestDto
    ) {
        userSettingService.sendGuardRequest(user, guardRequestDto);
        return ResponseEntity.ok("보호자에게 요청이 전송되었습니다.");
    }

    //보호자가 보낸 연결 요청 수락
    @PatchMapping("/{requestId}/status")
    public ResponseEntity<?> updateStatus(
            @PathVariable Long requestId,
            @RequestBody Status status
    ) {
        userSettingService.updateRequestStatus(requestId, status);
        return ResponseEntity.ok("OK");
    }
}
</file>

<file path="src/test/java/com/example/memory_guard/entity/UserTest.java">
package com.example.memory_guard.entity;

import com.example.memory_guard.user.domain.Role;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.UserProfile;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.Set; // List -> Set

import static org.assertj.core.api.Assertions.*;

class UserTest {

    private User testUser;

    @BeforeEach
    void setup() {
        UserProfile userProfile = UserProfile.builder()
            .userId("testUser")
            .username("테스트사용자")
            .password("password")
            .build();
        testUser = User.builder()
            .userProfile(userProfile)
            .build();
    }

    @Test
    @DisplayName("User 빌더 패턴과 addRole 메서드로 생성 테스트")
    void memberBuilderAndAddRoleTest() {
        String userId = "testUser";
        String password = "testPassword";
        Role userRole = Role.builder().name("ROLE_USER").build();
        Role adminRole = Role.builder().name("ROLE_ADMIN").build();

        UserProfile userProfile = UserProfile.builder()
            .userId(userId)
            .username("테스트사용자")
            .password(password)
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();

        member.addRole(userRole);
        member.addRole(adminRole);

        assertThat(member).isNotNull();
        assertThat(member.getUserProfile().getUserId()).isEqualTo(userId);
        assertThat(member.getUserProfile().getPassword()).isEqualTo(password);
        assertThat(member.getRoles()).isInstanceOf(Set.class);
        assertThat(member.getRoles()).hasSize(2);
        assertThat(member.getRoles()).extracting("name")
            .containsExactlyInAnyOrder("ROLE_USER", "ROLE_ADMIN");
    }

    @Test
    @DisplayName("User 단일 권한으로 생성 테스트")
    void memberSingleRoleTest() {
        String userId = "user1";
        String password = "pass123";
        Role userRole = Role.builder().name("ROLE_USER").build();

        UserProfile userProfile = UserProfile.builder()
            .userId(userId)
            .username("사용자1")
            .password(password)
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        member.addRole(userRole);

        assertThat(member.getUserProfile().getUserId()).isEqualTo(userId);
        assertThat(member.getUserProfile().getPassword()).isEqualTo(password);
        assertThat(member.getRoles()).hasSize(1);
        assertThat(member.getRoles()).extracting("name")
            .containsExactly("ROLE_USER");
    }

    @Test
    @DisplayName("User 권한 없이 생성 테스트")
    void memberWithoutRolesTest() {
        String userId = "user2";
        String password = "pass456";

        UserProfile userProfile = UserProfile.builder()
            .userId(userId)
            .username("사용자2")
            .password(password)
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();

        assertThat(member.getUserProfile().getUserId()).isEqualTo(userId);
        assertThat(member.getUserProfile().getPassword()).isEqualTo(password);
        // roles 필드가 new HashSet<>()으로 초기화되어 있으므로, 비어있는 Set이어야 함
        assertThat(member.getRoles()).isNotNull();
        assertThat(member.getRoles()).isEmpty();
    }

    @Test
    @DisplayName("User getter 메소드 테스트")
    void memberGetterTest() {
        String userId = "testId";
        String password = "testPass";
        Role userRole = Role.builder().name("ROLE_USER").build();

        UserProfile userProfile = UserProfile.builder()
            .userId(userId)
            .username("테스트아이디")
            .password(password)
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        member.addRole(userRole);

        assertThat(member.getId()).isNull();
        assertThat(member.getUserProfile().getUserId()).isEqualTo(userId);
        assertThat(member.getUserProfile().getPassword()).isEqualTo(password);
        assertThat(member.getRoles()).extracting("name").contains("ROLE_USER");
    }

    @Test
    @DisplayName("중복된 권한 추가 시 Set에 의해 한 번만 저장되는지 테스트")
    void addDuplicateRoleTest() {
        UserProfile userProfile = UserProfile.builder()
            .userId("testUser")
            .username("테스트유저")
            .password("password")
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        Role userRole = Role.builder().name("ROLE_USER").build();

        member.addRole(userRole);
        member.addRole(userRole);

        assertThat(member.getRoles()).hasSize(1);
    }


    @Test
    @DisplayName("User 객체 동등성 테스트 - @EqualsAndHashCode가 없을 경우")
    void memberEqualityTest() {
        Role userRole = Role.builder().name("ROLE_USER").build();

        UserProfile profile1 = UserProfile.builder().userId("user1").username("사용자1").password("pass1").build();
        User member1 = User.builder().userProfile(profile1).build();
        member1.addRole(userRole);

        UserProfile profile2 = UserProfile.builder().userId("user1").username("중복사용자1").password("pass1").build();
        User member2 = User.builder().userProfile(profile2).build();
        member2.addRole(userRole);

        UserProfile profile3 = UserProfile.builder().userId("user2").username("사용자2").password("pass1").build();
        User member3 = User.builder().userProfile(profile3).build();
        member3.addRole(userRole);

        assertThat(member1).isNotEqualTo(member2);
        assertThat(member1).isNotEqualTo(member3);
    }

    @Test
    @DisplayName("User null 값으로 생성 테스트")
    void memberNullValuesTest() {
        UserProfile userProfile = UserProfile.builder()
            .userId(null)
            .username(null)
            .password(null)
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();

        assertThat(member).isNotNull();
        assertThat(member.getUserProfile().getUserId()).isNull();
        assertThat(member.getUserProfile().getPassword()).isNull();
        assertThat(member.getRoles()).isNotNull().isEmpty();
    }

    @Test
    @DisplayName("성공: 보호자(guardian)가 피보호자(ward)를 추가하면 양방향 관계가 설정된다")
    void should_set_bidirectional_relationship_when_adding_ward() {
        UserProfile guardianProfile = UserProfile.builder()
            .userId("guardian1")
            .username("가디언1")
            .password("guardianPass")
            .build();
        User guardian = User.builder()
            .userProfile(guardianProfile)
            .build();

        UserProfile wardProfile = UserProfile.builder()
            .userId("ward1")
            .username("피보호자1")
            .password("wardPass")
            .build();
        User ward = User.builder()
            .userProfile(wardProfile)
            .build();

//        guardian.addWard(ward);
//
//        assertThat(guardian.getWards()).hasSize(1);
//        assertThat(guardian.getWards()).contains(ward);

//        assertThat(ward.getGuardian()).isNotNull();
//        assertThat(ward.getGuardian()).isEqualTo(guardian);
    }

    @Test
    @DisplayName("성공: 첫 녹음 시 연속 녹음 일수는 1이 되고 마지막 녹음 날짜는 오늘로 설정된다")
    void updateRecordingStreak_FirstTime() {
        testUser.updateRecordingStreak();

        assertThat(testUser.getConsecutiveRecordingDays()).isEqualTo(1);
        assertThat(testUser.getLastRecordingDate()).isEqualTo(LocalDate.now());
    }

    @Test
    @DisplayName("성공: 어제 녹음 후 오늘 또 녹음하면 연속 녹음 일수가 1 증가한다")
    void updateRecordingStreak_ConsecutiveDays() {
         testUser.setLastRecordingDate(LocalDate.now().minusDays(1));
         testUser.setConsecutiveRecordingDays(5);

         testUser.updateRecordingStreak();
         assertThat(testUser.getConsecutiveRecordingDays()).isEqualTo(6);
    }

    @Test
    @DisplayName("성공: 며칠 전 녹음 후 오늘 녹음하면 연속 녹음 일수가 1로 초기화된다")
    void updateRecordingStreak_ResetStreak() {
         testUser.setLastRecordingDate(LocalDate.now().minusDays(3));
         testUser.setConsecutiveRecordingDays(5);

         testUser.updateRecordingStreak();

         assertThat(testUser.getConsecutiveRecordingDays()).isEqualTo(1);
         assertThat(testUser.getLastRecordingDate()).isEqualTo(LocalDate.now());
    }

    @Test
    @DisplayName("성공: 오늘 여러 번 녹음해도 연속 녹음 일수는 변하지 않는다")
    void updateRecordingStreak_MultipleTimesInOneDay() {
        testUser.updateRecordingStreak();
        testUser.updateRecordingStreak();
        testUser.updateRecordingStreak();

        assertThat(testUser.getConsecutiveRecordingDays()).isEqualTo(1);
        assertThat(testUser.getLastRecordingDate()).isEqualTo(LocalDate.now());
    }
}
</file>

<file path="src/test/java/com/example/memory_guard/repository/UserRepositoryTest.java">
package com.example.memory_guard.repository;

import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.Role;
import com.example.memory_guard.user.domain.UserProfile;
import com.example.memory_guard.user.repository.RoleRepository;
import com.example.memory_guard.user.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.test.context.ActiveProfiles;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.*;

@DataJpaTest
@ActiveProfiles("test")
class UserRepositoryTest {

    @Autowired
    private TestEntityManager entityManager;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private RoleRepository roleRepository;

    private Role roleUser;
    private Role roleGuard;

    @BeforeEach
    void setUp() {

        Role userRoleEntity = Role.builder().name("ROLE_USER").build();
        Role adminRoleEntity = Role.builder().name("ROLE_ADMIN").build();

        this.roleUser = entityManager.persist(userRoleEntity);
        this.roleGuard = entityManager.persist(adminRoleEntity);

        entityManager.flush();
        entityManager.clear();
    }

    @Test
    @DisplayName("userId로 회원 조회 - 존재하는 회원")
    void findByUserIdExistingUserTest() {
        String userId = "testUser";
        UserProfile userProfile = UserProfile.builder()
            .userId(userId)
            .username("테스트사용자")
            .password("password123")
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        member.addRole(roleUser);

        entityManager.persist(member);
        entityManager.flush();

        Optional<User> foundUserOpt = userRepository.findByUserProfileUserId(userId);

        assertThat(foundUserOpt).isPresent();
        User foundUser = foundUserOpt.get();

        assertThat(foundUser.getUserProfile().getUserId()).isEqualTo(userId);
        assertThat(foundUser.getUserProfile().getPassword()).isEqualTo("password123");

        assertThat(foundUser.getRoles()).hasSize(1);
        assertThat(foundUser.getRoles()).extracting("name").containsExactly("ROLE_USER");
    }

    @Test
    @DisplayName("회원 저장 테스트")
    void saveUserTest() {
        UserProfile userProfile = UserProfile.builder()
            .userId("newUser")
            .username("새사용자")
            .password("newPassword")
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        member.addRole(roleUser);
        member.addRole(roleGuard);

        User savedUser = userRepository.save(member);
        entityManager.flush();

        assertThat(savedUser).isNotNull();
        assertThat(savedUser.getId()).isNotNull();
        assertThat(savedUser.getUserProfile().getUserId()).isEqualTo("newUser");

        User foundUser = entityManager.find(User.class, savedUser.getId());
        assertThat(foundUser.getRoles()).hasSize(2);
        assertThat(foundUser.getRoles()).extracting("name").containsExactlyInAnyOrder("ROLE_USER", "ROLE_ADMIN");
    }

    @Test
    @DisplayName("ID로 회원 조회 테스트")
    void findByIdTest() {
        UserProfile userProfile = UserProfile.builder()
            .userId("user123")
            .username("사용자123")
            .password("pass123")
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        member.addRole(roleUser);

        User savedUser = entityManager.persist(member);
        entityManager.flush();
        Long userId = savedUser.getId();

        Optional<User> foundUserOpt = userRepository.findById(userId);

        assertThat(foundUserOpt).isPresent();
        assertThat(foundUserOpt.get().getId()).isEqualTo(userId);
        assertThat(foundUserOpt.get().getUserProfile().getUserId()).isEqualTo("user123");
    }

    @Test
    @DisplayName("회원 삭제 테스트")
    void deleteUserTest() {
        UserProfile userProfile = UserProfile.builder()
            .userId("deleteUser")
            .username("삭제사용자")
            .password("deletePass")
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        member.addRole(roleUser);

        User savedUser = entityManager.persist(member);
        entityManager.flush();
        Long userId = savedUser.getId();

        userRepository.deleteById(userId);
        entityManager.flush();

        Optional<User> deletedUser = userRepository.findById(userId);
        assertThat(deletedUser).isNotPresent();

        Optional<Role> userRoleAfterDelete = roleRepository.findByName("ROLE_USER");
        assertThat(userRoleAfterDelete).isPresent();
    }

    @Test
    @DisplayName("모든 회원 조회 테스트")
    void findAllUsersTest() {
        UserProfile userProfile1 = UserProfile.builder().userId("user1").username("사용자1").password("pass1").build();
        User member1 = User.builder().userProfile(userProfile1).build();
        member1.addRole(roleUser);

        UserProfile userProfile2 = UserProfile.builder().userId("user2").username("사용자2").password("pass2").build();
        User member2 = User.builder().userProfile(userProfile2).build();
        member2.addRole(roleGuard);

        entityManager.persist(member1);
        entityManager.persist(member2);
        entityManager.flush();

        List<User> allUsers = userRepository.findAll();

        assertThat(allUsers).hasSize(2);
        assertThat(allUsers).extracting(user -> user.getUserProfile().getUserId()).containsExactlyInAnyOrder("user1", "user2");
    }

    @Test
    @DisplayName("중복 userId 저장 시 예외 발생 테스트")
    void saveDuplicateUserIdTest() {
        UserProfile userProfile1 = UserProfile.builder().userId("duplicateUser").username("중복사용자1").password("pass1").build();
        User member1 = User.builder().userProfile(userProfile1).build();
        member1.addRole(roleUser);
        userRepository.saveAndFlush(member1);

        UserProfile userProfile2 = UserProfile.builder().userId("duplicateUser").username("중복사용자2").password("pass2").build();
        User member2 = User.builder().userProfile(userProfile2).build();
        member2.addRole(roleGuard);

        assertThatThrownBy(() -> {
            userRepository.saveAndFlush(member2);
        }).isInstanceOf(DataIntegrityViolationException.class);
    }


    @Test
    @DisplayName("회원 정보 업데이트 테스트")
    void updateUserTest() {
        UserProfile userProfile = UserProfile.builder()
            .userId("updateUser")
            .username("업데이트사용자")
            .password("originalPass")
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        member.addRole(roleUser);

        entityManager.persistAndFlush(member);
        entityManager.clear();

        User foundUser = userRepository.findByUserProfileUserId("updateUser").get();
        foundUser.addRole(roleGuard);

        userRepository.saveAndFlush(foundUser);
        entityManager.clear();

        User updatedUser = userRepository.findById(foundUser.getId()).get();
        assertThat(updatedUser.getUserProfile().getPassword()).isEqualTo("originalPass");
        assertThat(updatedUser.getRoles()).hasSize(2);
        assertThat(updatedUser.getRoles()).extracting("name")
            .containsExactlyInAnyOrder("ROLE_USER", "ROLE_ADMIN");
    }

    @Test
    @DisplayName("성공: 보호자와 피보호자 관계를 저장하고 올바르게 조회한다")
    void should_save_and_find_user_with_guardian_relationship() {
        UserProfile guardianProfile = UserProfile.builder()
            .userId("guardian_test")
            .username("가디언테스트")
            .password("pass_g")
            .build();
        User guardian = User.builder()
            .userProfile(guardianProfile)
            .build();
        guardian.addRole(roleGuard);

        UserProfile wardProfile = UserProfile.builder()
            .userId("ward_test")
            .username("피보호자테스트")
            .password("pass_w")
            .build();
        User ward = User.builder()
            .userProfile(wardProfile)
            .build();
        ward.addRole(roleUser);

        //guardian.addWard(ward);
        entityManager.persist(guardian);

        entityManager.flush();
        entityManager.clear();

        User foundWard = userRepository.findByUserProfileUserId("ward_test").orElse(null);

        User foundGuardian = userRepository.findByUserProfileUserId("guardian_test").orElse(null);

        assertThat(foundWard).isNotNull();
        assertThat(foundGuardian).isNotNull();

//        assertThat(foundWard.getGuardian()).isNotNull();
//        assertThat(foundWard.getGuardian().getId()).isEqualTo(foundGuardian.getId());
//
//        assertThat(foundGuardian.getWards()).hasSize(1);
//        assertThat(foundGuardian.getWards().get(0).getId()).isEqualTo(foundWard.getId());
    }

    @Test
    @DisplayName("username으로 회원 조회 - 존재하는 회원")
    void findByUsernameExistingUserTest() {
        // given
        String username = "테스트유저명";
        UserProfile userProfile = UserProfile.builder()
            .userId("testUserId")
            .username(username)
            .password("password123")
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        member.addRole(roleUser);

        entityManager.persist(member);
        entityManager.flush();

        Optional<User> foundUserOpt = userRepository.findByUserProfileUsername(username);

        assertThat(foundUserOpt).isPresent();
        User foundUser = foundUserOpt.get();

        assertThat(foundUser.getUserProfile().getUsername()).isEqualTo(username);
        assertThat(foundUser.getUserProfile().getUserId()).isEqualTo("testUserId");
    }

    @Test
    @DisplayName("username 존재 여부 확인 테스트")
    void existsByUsernameTest() {
        // given
        String username = "존재하는유저명";
        UserProfile userProfile = UserProfile.builder()
            .userId("existUser")
            .username(username)
            .password("password123")
            .build();
        User member = User.builder()
            .userProfile(userProfile)
            .build();
        member.addRole(roleUser);

        entityManager.persist(member);
        entityManager.flush();

        boolean exists = userRepository.existsByUserProfileUsername(username);
        boolean notExists = userRepository.existsByUserProfileUsername("존재하지않는유저명");

        assertThat(exists).isTrue();
        assertThat(notExists).isFalse();
    }

    @Test
    @DisplayName("중복 username 저장 시 예외 발생 테스트")
    void saveDuplicateUsernameTest() {
        UserProfile userProfile1 = UserProfile.builder()
            .userId("user1")
            .username("중복유저명")
            .password("pass1")
            .build();
        User member1 = User.builder()
            .userProfile(userProfile1)
            .build();
        member1.addRole(roleUser);
        userRepository.saveAndFlush(member1);

        UserProfile userProfile2 = UserProfile.builder()
            .userId("user2")
            .username("중복유저명")
            .password("pass2")
            .build();
        User member2 = User.builder()
            .userProfile(userProfile2)
            .build();
        member2.addRole(roleGuard);

        assertThatThrownBy(() -> {
            userRepository.saveAndFlush(member2);
        }).isInstanceOf(DataIntegrityViolationException.class);
    }

    @Test
    @DisplayName("보호자 삭제 시 orphanRemoval에 의해 GuardUserLink도 함께 삭제된다")
    void should_delete_guard_user_link_when_guardian_deleted_orphanRemoval() {
        // given
        UserProfile guardianProfile = UserProfile.builder()
            .userId("guardian_delete")
            .username("삭제될보호자")
            .password("pass_g")
            .build();
        User guardian = User.builder()
            .userProfile(guardianProfile)
            .build();
        guardian.addRole(roleGuard);

        UserProfile wardProfile = UserProfile.builder()
            .userId("ward_keep")
            .username("유지될피보호자")
            .password("pass_w")
            .build();
        User ward = User.builder()
            .userProfile(wardProfile)
            .build();
        ward.addRole(roleUser);

//        guardian.addWard(ward);
//        entityManager.persist(guardian);
//        entityManager.flush();
//
//        Long guardianId = guardian.getId();
//        Long wardId = ward.getId();
//
//        assertThat(guardian.getWards()).hasSize(1);
//        assertThat(ward.getGuardian()).isNotNull();
//
//        entityManager.clear();
//
//        userRepository.deleteById(guardianId);
//        entityManager.flush();
//        entityManager.clear();
//
//        User foundWard = userRepository.findById(wardId).orElse(null);
//        assertThat(foundWard).isNotNull();
//        assertThat(foundWard.getGuardian()).isNull();
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/controller/UserController.java">
package com.example.memory_guard.user.controller;

import com.example.memory_guard.user.dto.*;
import com.example.memory_guard.global.auth.dto.TokenDto;
import com.example.memory_guard.user.service.UserService;
import com.example.memory_guard.user.domain.User;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseCookie;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
@RequiredArgsConstructor
public class UserController {

  private final UserService userService;

  @Value ("${jwt.refresh-token-expiration-seconds}")
  private long refreshTokenValiditySeconds;

  @PostMapping("/ward/signup")
  public ResponseEntity<String> signup(@RequestBody SignupRequestDto signupDto) {
      userService.signup(signupDto, "ROLE_USER");
      return ResponseEntity.ok("회원가입이 완료되었습니다.");
  }

  @PostMapping("/guard/signup")
  public ResponseEntity<String> guardSignup(@RequestBody SignupRequestDto signupDto) {
      userService.signup(signupDto, "ROLE_GUARD");
      return ResponseEntity.ok("보호자 회원가입이 완료되었습니다.");
  }

  @PostMapping("/user/login")
  public ResponseEntity<LoginResponseDto> login(@RequestBody LoginRequestDto loginDto, HttpServletResponse response) {
    String userId = loginDto.getUserId();
    String password = loginDto.getPassword();

    TokenDto tokenInfo = userService.login(userId, password);

    ResponseCookie cookie = ResponseCookie.from("refreshToken", tokenInfo.getRefreshToken())
        .maxAge(refreshTokenValiditySeconds)
        .path("/")
        .secure(false)
        .httpOnly(true)
        .sameSite("Lax")
        .build();

    response.addHeader(HttpHeaders.SET_COOKIE, cookie.toString());

    LoginResponseDto loginResponseDto = LoginResponseDto.builder()
        .grantType(tokenInfo.getGrantType())
        .accessToken(tokenInfo.getAccessToken())
        .userId(userId)
        .roles(userService.getUserRoles(userId))
        .build();

    return ResponseEntity.ok(loginResponseDto);
  }

  @PostMapping("/token/reissue")
  public ResponseEntity<?> reissue(@CookieValue(name = "refreshToken", required = false) String refreshToken) {
    if (refreshToken == null) {
      return ResponseEntity
          .status(HttpStatus.UNAUTHORIZED)
          .body("Refresh Token이 없습니다.");
    }

    try {
      LoginResponseDto newAccessToken = userService.reissueAccessToken(refreshToken);
      return ResponseEntity.ok(newAccessToken);
    } catch (IllegalArgumentException e) {
      ResponseCookie cookie = ResponseCookie.from("refreshToken", "")
          .maxAge(0)
          .path("/")
          .build();

      return ResponseEntity
          .status(HttpStatus.UNAUTHORIZED)
          .header(HttpHeaders.SET_COOKIE, cookie.toString())
          .body("유효하지 않은 Refresh Token 입니다. 다시 로그인해주세요.");
    }
  }

  @GetMapping("/api/ward/home")
  public ResponseEntity<WardHomeResponseDto> wardHome(@AuthenticationPrincipal User user) {
    WardHomeResponseDto response = userService.getWardHomeData(user);
    return ResponseEntity.ok(response);
  }

  @GetMapping("/{userId}/exists")
  public ResponseEntity<UserExistResponseDto> existUser(@PathVariable String userId){
    boolean exist = userService.existUserId(userId);
    return ResponseEntity.ok(new UserExistResponseDto(exist));
  }

  @GetMapping("/home/user")
  public String testUser(){
    return "User";
  }

  @GetMapping("/home/guard")
  public String testGuard(){
    return "Guard";
  }
}
</file>

<file path="src/test/java/com/example/memory_guard/service/AudioServiceTest.java">
package com.example.memory_guard.service;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.dto.response.AudioStampResponseDto;
import com.example.memory_guard.audio.repository.AudioMetadataRepository;
import com.example.memory_guard.analysis.service.AudioAnalysisService;
import com.example.memory_guard.audio.service.AudioService;
import com.example.memory_guard.audio.service.AudioStorageService;
import com.example.memory_guard.diary.service.DiaryService;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.UserProfile;

import com.example.memory_guard.user.repository.UserRepository;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AudioServiceTest {

    @InjectMocks
    private AudioService audioService;

    @Mock
    private AudioStorageService audioStorageService;
    @Mock
    private AudioAnalysisService audioEvaluationService;
    @Mock
    private DiaryService diaryService;

    @Mock
    private AudioMetadataRepository audioMetadataRepository;
    @Mock
    private UserRepository userRepository;

    @Mock
    private MultipartFile mockMultipartFile;
    @Mock
    private AbstractAudioMetadata mockAudioMetadata;

    @Spy
    private User testUser = User.builder()
        .userProfile(UserProfile.builder()
            .userId("testUser")
            .username("테스트사용자")
            .password("password")
            .build())
        .build();

    @Test
    @DisplayName("성공: 새로운 오디오 처리 시 User의 updateRecordingStreak 메소드가 호출된다")
    void processNewAudio_shouldCallUpdateRecordingStreak() throws IOException {
        when(userRepository.findById(testUser.getId())).thenReturn(Optional.of(testUser));
        when(audioStorageService.save(mockMultipartFile, testUser)).thenReturn(mockAudioMetadata);

        audioService.processNewAudio(mockMultipartFile, testUser);

        verify(testUser, times(1)).updateRecordingStreak();
        verify(audioStorageService, times(1)).save(mockMultipartFile, testUser);
        verify(audioEvaluationService, times(1)).evaluate(mockAudioMetadata, testUser);
        verify(diaryService, times(1)).createAudioDiary(mockAudioMetadata, testUser);
    }

    @Test
    @DisplayName("성공: 주간 오디오 스탬프 조회 시 올바른 DTO를 반환한다")
    void getAudioStamps_Success() {
        AbstractAudioMetadata mondayRecording = mock(AbstractAudioMetadata.class);
        when(mondayRecording.getCreatedAt()).thenReturn(LocalDateTime.now().with(java.time.DayOfWeek.MONDAY));

        AbstractAudioMetadata wednesdayRecording = mock(AbstractAudioMetadata.class);
        when(wednesdayRecording.getCreatedAt()).thenReturn(LocalDateTime.now().with(java.time.DayOfWeek.WEDNESDAY));

        List<AbstractAudioMetadata> weeklyRecordings = List.of(mondayRecording, wednesdayRecording);

        when(audioMetadataRepository.findByUserAndCreatedAtBetween(eq(testUser), any(LocalDateTime.class), any(LocalDateTime.class)))
            .thenReturn(weeklyRecordings);

        AudioStampResponseDto response = audioService.getAudioStamps(testUser);

        assertThat(response.getConsecutiveRecordingDays()).isEqualTo(testUser.getConsecutiveRecordingDays());
        assertThat(response.getWeeklyStamps()).hasSize(2);
        assertThat(response.getWeeklyStamps()).contains(
            LocalDate.now().with(java.time.DayOfWeek.MONDAY),
            LocalDate.now().with(java.time.DayOfWeek.WEDNESDAY)
        );
    }

    @Test
    @DisplayName("성공: 주간 녹음 기록이 없을 경우 빈 리스트를 반환한다")
    void getAudioStamps_NoRecordings() {
        when(audioMetadataRepository.findByUserAndCreatedAtBetween(eq(testUser), any(LocalDateTime.class), any(LocalDateTime.class)))
            .thenReturn(Collections.emptyList());

        AudioStampResponseDto response = audioService.getAudioStamps(testUser);

        assertThat(response.getConsecutiveRecordingDays()).isEqualTo(0);
        assertThat(response.getWeeklyStamps()).isNotNull();
        assertThat(response.getWeeklyStamps()).isEmpty();
    }


    @Test
    @DisplayName("성공: 새로운 오디오 처리 시 모든 하위 서비스가 순서대로 호출된다")
    void processNewAudio_Success_ShouldCallServices() throws IOException {
        when(userRepository.findById(testUser.getId())).thenReturn(Optional.of(testUser));
        when(audioStorageService.save(mockMultipartFile, testUser)).thenReturn(mockAudioMetadata);

        audioService.processNewAudio(mockMultipartFile, testUser);

        verify(audioStorageService, times(1)).save(mockMultipartFile, testUser);
        verify(audioEvaluationService, times(1)).evaluate(mockAudioMetadata, testUser);
        verify(diaryService, times(1)).createAudioDiary(mockAudioMetadata, testUser);
    }

    @Test
    @DisplayName("실패: 오디오 저장 중 IOException 발생 시 예외가 전파된다")
    void processNewAudio_ThrowsIOException_WhenStorageFails() throws IOException {
        when(userRepository.findById(testUser.getId())).thenReturn(Optional.of(testUser));
        when(audioStorageService.save(mockMultipartFile, testUser))
            .thenThrow(new IOException("디스크 공간 부족"));

        assertThatThrownBy(() -> audioService.processNewAudio(mockMultipartFile, testUser))
            .isInstanceOf(IOException.class)
            .hasMessage("디스크 공간 부족");

        verify(audioEvaluationService, never()).evaluate(any(), any());
        verify(diaryService, never()).createAudioDiary(any(), any());
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/controller/AudioController.java">
package com.example.memory_guard.audio.controller;

import com.example.memory_guard.audio.dto.response.AudioAnalysisReport;
import com.example.memory_guard.analysis.dto.SentenceAnalysisResponseDto;
import com.example.memory_guard.analysis.dto.FinalFeedbackResponseDto;
import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.domain.AudioTranscription;
import com.example.memory_guard.audio.dto.response.*;
import com.example.memory_guard.audio.service.AudioService;
import com.example.memory_guard.analysis.service.SentenceAnalysisService;
import com.example.memory_guard.analysis.service.FinalFeedbackService;
import com.example.memory_guard.diary.domain.Diary;
import com.example.memory_guard.diary.service.DiaryService;
import com.example.memory_guard.user.domain.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.MultipartBodyBuilder;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.File;
import java.io.IOException;

@Controller
@RequiredArgsConstructor
@Slf4j
@RequestMapping("/api/ward/audio")
public class AudioController {

  private final AudioService audioService;
  private final DiaryService diaryService;
  private final SentenceAnalysisService sentenceAnalysisService;
  private final FinalFeedbackService finalFeedbackService;
  private final int AUDIO_MIN_TIME_SECOND = 20;

  // 1. 음성저장
    @PostMapping("/save")
    public ResponseEntity<AudioSaveResponseDto> audioEvaluation(
        @RequestParam("audioFile") MultipartFile audioFile,
        @AuthenticationPrincipal User user) throws IOException, UnsupportedAudioFileException {

      if (audioFile.isEmpty()){
        throw new IllegalArgumentException("오디오가 비어있어요.");
      }

      // 테스트를 위해 꺼둠
  //    if (AudioUtils.getAudioSecondTime(audioFile) <= AUDIO_MIN_TIME_SECOND) {
  //      throw new IllegalArgumentException("오디오의 길이가 너무 짧아요. 분석을 위해 다시 녹음해주세요.");
  //    }

      // 오디오 저장
      AudioSaveResultDto saveResult = audioService.saveAudio(audioFile, user);

      // 오디오 추출
      audioService.extractAudioText(saveResult.getAudioId());

      AudioSaveResponseDto audioSaveResponseDto = AudioSaveResponseDto.builder()
          .audioId(saveResult.getAudioId())
          .consecutiveRecordingDays(saveResult.getUser().getConsecutiveRecordingDays())
          .build();

      return ResponseEntity.ok(audioSaveResponseDto);
    }

  @GetMapping("/report/{audioId}")
  public ResponseEntity<AudioAnalysisReport> audioReport(@PathVariable Long audioId, @AuthenticationPrincipal User user) throws IOException {

    AbstractAudioMetadata metadata = audioService.getAudioMetadata(audioId);

    audioService.audioEvaluate(metadata, user);

    AudioAnalysisReport report = audioService.audioEvaluateWardReport(metadata, user);

    return ResponseEntity.ok(report);
  }


  // 음성기록을 하고 "다음으로" 버튼을 누르면 / 테스트 확인
  @GetMapping("/{audioId}")
  public ResponseEntity<Object> getAudioAndContent(@PathVariable Long audioId, @AuthenticationPrincipal User user) throws IOException {
    AbstractAudioMetadata metadata = audioService.getAudioMetadata(audioId);

    File audioFile = metadata.getFile();
    log.info("오디오가 위치한 경로: {}", audioFile.getAbsolutePath());
    AudioTranscription audioTranscription = audioService.getAudioTranscription(audioId);
    Diary diary = diaryService.createAudioDiary(metadata, user);

    MultipartBodyBuilder builder = new MultipartBodyBuilder();

    builder.part("title", diary.getTitle(), MediaType.APPLICATION_JSON);

    builder.part("content", createAudioTranscriptionResponseDto(audioTranscription), MediaType.APPLICATION_JSON);

    builder.part("audio", new FileSystemResource(audioFile))
        .header("Content-Disposition", "inline; filename=\"" + audioFile.getName() + "\"");

    return ResponseEntity.ok()
        .contentType(MediaType.MULTIPART_FORM_DATA)
        .body(builder.build());
  }


  // 테스트 확인
  @GetMapping("/sentence/feedback/{audioId}")
  public ResponseEntity<Object> getSentenceFeedback(@PathVariable Long audioId, @AuthenticationPrincipal User user) throws IOException {
    AbstractAudioMetadata metadata = audioService.getAudioMetadata(audioId);

    SentenceAnalysisResponseDto feedbacks = sentenceAnalysisService.analyzeSentence(metadata);

    return ResponseEntity.ok()
        .contentType(MediaType.APPLICATION_JSON)
        .body(feedbacks);
  }

  // 테스트 확인
  @GetMapping("/stamps")
  public ResponseEntity<AudioStampResponseDto> getWeeklyStamps(@AuthenticationPrincipal User user) {
    AudioStampResponseDto responseDto = audioService.getAudioStamps(user);
    return ResponseEntity.ok(responseDto);
  }

  // 테스트 확인
  @GetMapping("/finalReport/{audioId}")
  public ResponseEntity<FinalFeedbackResponseDto> getFinalReport(@PathVariable Long audioId, @AuthenticationPrincipal User user) throws IOException {
    AbstractAudioMetadata metadata = audioService.getAudioMetadata(audioId);
    
    FinalFeedbackResponseDto existingFeedbacks = finalFeedbackService.getFinalFeedback(audioId);
    
    if (existingFeedbacks.getFinalFeedbacks().isEmpty()) {
      FinalFeedbackResponseDto finalFeedback = finalFeedbackService.generateAndSaveFinalFeedback(metadata);
      return ResponseEntity.ok(finalFeedback);
    } else {
      return ResponseEntity.ok(existingFeedbacks);
    }
  }

  @PostMapping("/speak/sentence")
  public ResponseEntity<SpeakSentenceResponseDto> speakSentence(
      @RequestParam("audioFile") MultipartFile audioFile,
      @RequestParam("sentence") String sentence,
      @AuthenticationPrincipal User user) throws IOException {
    
    if (audioFile.isEmpty()) {
      throw new IllegalArgumentException("오디오 파일이 비어있습니다.");
    }
    
    SpeakSentenceResponseDto result = audioService.speakSentenceProcess(audioFile, sentence);
    
    return ResponseEntity.ok(result);
  }

  private static AudioTranscriptionResponseDto createAudioTranscriptionResponseDto(AudioTranscription audioTranscription) {
    return AudioTranscriptionResponseDto.builder()
        .audioText(audioTranscription.getText())
        .audioId(audioTranscription.getAudioMetadata().getId())
        .build();
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/service/UserSettingService.java">
package com.example.memory_guard.user.service;

import com.example.memory_guard.user.domain.GuardRequest;
import com.example.memory_guard.user.domain.GuardUserLink;
import com.example.memory_guard.user.domain.Status;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.dto.GuardManagementResponseDto;
import com.example.memory_guard.user.dto.GuardRequestDto;
import com.example.memory_guard.user.dto.GuardUserDto;
import com.example.memory_guard.user.repository.GuardRequestRepository;
import com.example.memory_guard.user.repository.GuardUserLinkRepository;
import com.example.memory_guard.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@RequiredArgsConstructor
@Service
public class UserSettingService {

    private final UserRepository userRepository;
    private final GuardRequestRepository guardRequestRepository;
    private final GuardUserLinkRepository guardUserLinkRepository;

    public List<GuardUserDto> getAllGuards(User ward) {
        User persistUser = userRepository
            .findById(ward.getId()).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));
        return persistUser.getGuardians().stream()
                .map(GuardUserDto::fromEntity)
                .toList();
    }

    public GuardManagementResponseDto getManagement(User ward) {
        User persistUser = userRepository
            .findById(ward.getId()).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));

        return GuardManagementResponseDto.fromEntity(
                persistUser.getGuardians(),
                persistUser.getReceivedRequests(),
                persistUser.getSentRequests()
        );
    }

    public Optional<GuardUserDto> getGuard(String userId) {
        return userRepository.findByUserProfileUserId(userId)
            .filter(user -> user.getRoles().stream()
                .anyMatch(role -> role.getName().equals("ROLE_GUARD")))
            .map(GuardUserDto::fromEntity);
    }

    public void sendGuardRequest(User ward, GuardRequestDto guardRequestDto) {
        User guard = userRepository.findByUserProfileUserId(guardRequestDto.getReceiverUserId())
                .orElseThrow(() -> new IllegalArgumentException("요청 대상 보호자를 찾을 수 없습니다."));

        User persistWard = userRepository
            .findById(ward.getId()).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));

        GuardRequest guardRequest = GuardRequestDto.toEntity(ward, guard);
        guard.getReceivedRequests().add(guardRequest);
        persistWard.getSentRequests().add(guardRequest);

        guardRequestRepository.save(guardRequest);
    }

    public void updateRequestStatus(Long requestId, Status status) {
        GuardRequest request = guardRequestRepository.findGuardRequestById(requestId)
                .orElseThrow(() -> new IllegalArgumentException("요청을 찾을 수가 없습니다"));

        User guard = request.getRequester();
        User ward = request.getReceiver();

        //요청이 거절되었을 떄
        if (status == Status.REJECTED) {
            guard.getSentRequests().remove(request);
            ward.getReceivedRequests().remove(request);
            guardRequestRepository.delete(request);
        }

        //요청 수락되었을 떄
        if (status == Status.ACCEPTED) {
            // 수락을 하면 User와 Guard둘다 설정이
            GuardUserLink guardUserLink = guard.addWard(ward);
            guardUserLinkRepository.save(guardUserLink);

            ward.getSentRequests().remove(request);
            guard.getReceivedRequests().remove(request);
            guardRequestRepository.delete(request);
        }
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/service/UserService.java">
package com.example.memory_guard.user.service;

import com.example.memory_guard.global.exception.custom.AuthenticationException;
import com.example.memory_guard.global.exception.custom.InvalidRequestException;
import com.example.memory_guard.user.domain.UserProfile;
import com.example.memory_guard.user.dto.LoginResponseDto;
import com.example.memory_guard.user.dto.SignupRequestDto;
import com.example.memory_guard.user.dto.GuardSignupRequestDto;
import com.example.memory_guard.user.dto.WardHomeResponseDto;
import com.example.memory_guard.diary.dto.DiaryAudioInfoDto;
import com.example.memory_guard.audio.service.AudioService;
import com.example.memory_guard.audio.dto.response.AudioStampResponseDto;
import com.example.memory_guard.diary.domain.Diary;
import com.example.memory_guard.global.auth.dto.TokenDto;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.domain.Role;
import com.example.memory_guard.global.auth.utils.JwtProvider;
import com.example.memory_guard.user.repository.UserRepository;
import com.example.memory_guard.user.repository.RoleRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class UserService {

  private final JwtProvider jwtProvider;
  private final UserRepository userRepository;
  private final RoleRepository roleRepository;
  private final PasswordEncoder passwordEncoder;
  private final AudioService audioService;

  public void signup(SignupRequestDto signupRequest, String role) {
    isDupUser(signupRequest);

    User user = createUser(signupRequest);
    setRole(user, role);

    userRepository.save(user);
  }

//  public void guardSignup(GuardSignupRequestDto signupRequest) {
//    isDupUser(signupRequest);
//
//    User ward = isValidWardUser(signupRequest);
//    User guardian = createUser(signupRequest);
//
//    guardian.addWard(ward);
//    setRole(guardian, "ROLE_GUARD");
//    userRepository.save(guardian);
//  }

  public TokenDto login(String userId, String password) {

    User user = isExistUser(userId, password);

    List<GrantedAuthority> authorities = createGrantedAuthority(user);

    Authentication authentication = new UsernamePasswordAuthenticationToken(user.getUserProfile().getUserId(), null, authorities);

    return jwtProvider.generateToken(authentication);
  }

  public List<String> getUserRoles(String userId) {
    User user = userRepository.findByUserProfileUserId(userId)
        .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 사용자 ID입니다."));
    
    return user.getRoles().stream()
        .map(role -> role.getName())
        .collect(Collectors.toList());
  }

  public LoginResponseDto reissueAccessToken(String refreshToken) {
    if (!jwtProvider.validateToken(refreshToken)) {
      throw new IllegalArgumentException("유효하지 않거나 만료된 Refresh Token 입니다.");
    }

    String userId = jwtProvider.getUserIdFromToken(refreshToken);

    User user = userRepository.findByUserProfileUserId(userId)
        .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 사용자입니다."));

    String authorities = user.getRoles().stream()
        .map(role -> role.getName())
        .collect(Collectors.joining(","));

    String newAccessToken = jwtProvider.createAccessToken(user.getUserProfile().getUserId(), authorities);

    return LoginResponseDto.builder()
        .grantType("Bearer")
        .accessToken(newAccessToken)
        .build();
  }

  @Transactional(readOnly = true)
  public WardHomeResponseDto getWardHomeData(User user) {
    User persistentUser = userRepository.findById(user.getId())
        .orElseThrow(() -> new UsernameNotFoundException("User not found with id: " + user.getId()));

    AudioStampResponseDto audioStamps = audioService.getAudioStamps(persistentUser);

    List<DiaryAudioInfoDto> diaryList = persistentUser.getDiaries().stream()
        .map(this::convertToDiaryAudioInfoDto)
        .collect(Collectors.toList());

    return WardHomeResponseDto.builder()
        .consecutiveRecordingDays(audioStamps.getConsecutiveRecordingDays())
        .weeklyStamps(audioStamps.getWeeklyStamps())
        .diaryList(diaryList)
        .build();
  }

  @Transactional
  public void selectWardForGuardian(User guardian, String wardId) {
    User managedGuardian = userRepository.findById(guardian.getId())
        .orElseThrow(() -> new UsernameNotFoundException("보호자를 찾을 수 없습니다. ID: " + guardian.getId()));

    User wardToSelect = userRepository.findByUserProfileUserId(wardId)
        .orElseThrow(() -> new InvalidRequestException("선택한 피보호자를 찾을 수 없습니다. ID: " + wardId));

    managedGuardian.setPrimaryWard(wardToSelect);
    userRepository.save(managedGuardian);
  }

  private DiaryAudioInfoDto convertToDiaryAudioInfoDto(Diary diary) {
    return DiaryAudioInfoDto.builder()
        .audioId(diary.getAudioMetadata().getId())
        .title(diary.getTitle())
        .duration(diary.getAudioMetadata().getDuration())
        .build();
  }

  private User isExistUser(String userId, String password) {
    User user = userRepository.findByUserProfileUserId(userId)
        .orElseThrow(() -> new AuthenticationException("존재하지 않는 사용자 ID입니다."));

    if (!passwordEncoder.matches(password, user.getUserProfile().getPassword())) {
      throw new AuthenticationException("비밀번호가 일치하지 않습니다.");
    }
    return user;
  }

  private User isValidWardUser(GuardSignupRequestDto signupRequest) {
    User ward = userRepository.findByUserProfileUserId(signupRequest.getWardUserId())
        .orElseThrow(() -> new InvalidRequestException("존재하지 않는 피보호자입니다."));

    boolean hasUserRole = ward.getRoles().stream()
        .anyMatch(role -> "ROLE_USER".equals(role.getName()));

    if (!hasUserRole) {
      throw new InvalidRequestException("해당 사용자는 피보호자 권한이 없습니다.");
    }
    return ward;
  }

  private void setRole(User user, String role) {
    Role userRole  = roleRepository.findByName(role)
        .orElseThrow(() -> new IllegalStateException(role + "가 존재하지 않습니다."));

    user.addRole(userRole);
  }

  private User createUser(SignupRequestDto signupRequest) {
    UserProfile userProfile = UserProfile.builder()
        .userId(signupRequest.getUserId())
        .password(passwordEncoder.encode(signupRequest.getPassword()))
        .username(signupRequest.getUsername())
        .build();

    return User.builder().userProfile(userProfile).build();
  }

  private static List<GrantedAuthority> createGrantedAuthority(User user) {
    List<GrantedAuthority> authorities = user.getRoles().stream()
        .map(role -> new SimpleGrantedAuthority(role.getName()))
        .collect(Collectors.toList());
    return authorities;
  }

  private void isDupUser(SignupRequestDto signupRequest) {
    if (userRepository.findByUserProfileUserId(signupRequest.getUserId()).isPresent()) {
      throw new InvalidRequestException("이미 존재하는 사용자 ID입니다.");
    }

    if (userRepository.existsByUserProfileUsername(signupRequest.getUsername())) {
      throw new InvalidRequestException("이미 존재하는 사용자명입니다.");
    }
  }

  public boolean existUserId(String userId) {
    return userRepository.existsByUserProfileUserId(userId);
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/guard/controller/GuardController.java">
package com.example.memory_guard.guard.controller;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.dto.response.AudioAnalysisReport;
import com.example.memory_guard.audio.service.AudioService;
import com.example.memory_guard.guard.dto.*;
import com.example.memory_guard.guard.service.GuardService;
import com.example.memory_guard.user.domain.Status;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.dto.GuardRequestDto;
import com.example.memory_guard.user.dto.WardUserDto;
import com.example.memory_guard.user.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/guard")
public class GuardController {

    private final GuardService guardService;
    private final AudioService audioService;
    private final UserService userService;

    @GetMapping("/home")
    public ResponseEntity<GuardHomeResponseDto> getHomeData(
            @AuthenticationPrincipal User user
    ) {
        return ResponseEntity.ok(guardService.getHomeData(user));
    }

    @GetMapping("/weekly-report")
    public ResponseEntity<GuardReportResponseDto> getReport(
            @AuthenticationPrincipal User user
    ) {
        return ResponseEntity.ok(guardService.getReport(user));
    }

    @GetMapping("/calendar")
    public ResponseEntity<GuardCalendarResponseDto> getCalendar(
            @AuthenticationPrincipal User user
    ) {
        return ResponseEntity.ok(guardService.getCalendar(user));
    }

    @GetMapping("/setting")
    public ResponseEntity<List<GuardSettingResponseDto>> getSettings(
            @AuthenticationPrincipal User user
    ) {
        return ResponseEntity.ok(guardService.getSettings(user));
    }

    @GetMapping("/management")
    public ResponseEntity<GuardManagementResponseDto> getAllWards(
            @AuthenticationPrincipal User user
    ) {
        return ResponseEntity.ok(guardService.getManagement(user));
    }

    @GetMapping("/search-ward")
    public ResponseEntity<Optional<WardUserDto>> getWard(
            @RequestParam String userId
    ) {
        return ResponseEntity.ok(guardService.getWard(userId));
    }

    @PostMapping("/enroll-wards")
    public ResponseEntity<?> addWard(
            @AuthenticationPrincipal User user,
            @RequestBody GuardRequestDto guardRequestDto
    ) {
        guardService.sendGuardRequest(user, guardRequestDto);
        return ResponseEntity.ok("피보호자에게 요청이 전송되었습니다.");
    }

    //비보호자가 보낸 연결 요청 수락
    @PatchMapping("/{requestId}/status")
    public ResponseEntity<?> updateStatus(
            @PathVariable Long requestId,
            @RequestBody Status status
    ) {
        guardService.updateRequestStatus(requestId, status);
        return ResponseEntity.ok("OK");
    }

    @PatchMapping("/selectWard/{wardId}")
    public ResponseEntity<String> selectWard(@AuthenticationPrincipal User guardian, @PathVariable String wardId) {
        userService.selectWardForGuardian(guardian, wardId);
        return ResponseEntity.ok("동행자 선택이 변경되었습니다.");
    }

    @GetMapping("/report")
    public ResponseEntity<AudioAnalysisReport> audioReport(@AuthenticationPrincipal User guardian) throws IOException {

        User ward = guardian.getPrimaryWard();
        if (ward == null) {
            throw new IllegalStateException("주 피보호자가 설정되어 있지 않습니다.");
        }

        AbstractAudioMetadata latestMetadata = audioService.getLatestAudioMetadata(ward);

        audioService.audioEvaluate(latestMetadata, ward);

        AudioAnalysisReport report = audioService.audioEvaluateWardReport(latestMetadata, ward);

        return ResponseEntity.ok(report);
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/guard/service/GuardService.java">
package com.example.memory_guard.guard.service;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.repository.AudioMetadataRepository;
import com.example.memory_guard.diary.domain.Diary;
import com.example.memory_guard.diary.dto.DiaryInfoDto;
import com.example.memory_guard.diary.repository.DiaryRepository;
import com.example.memory_guard.diary.service.DiaryService;
import com.example.memory_guard.guard.dto.*;
import com.example.memory_guard.user.domain.GuardRequest;
import com.example.memory_guard.user.domain.GuardUserLink;
import com.example.memory_guard.user.domain.Status;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.dto.GuardRequestDto;
import com.example.memory_guard.user.dto.WardUserDto;
import com.example.memory_guard.user.repository.GuardRequestRepository;
import com.example.memory_guard.user.repository.GuardUserLinkRepository;
import com.example.memory_guard.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.temporal.TemporalAdjusters;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class GuardService {

    private final AudioMetadataRepository audioMetadataRepository;
    private final UserRepository userRepository;
    private final GuardRequestRepository guardRequestRepository;
    private final GuardUserLinkRepository guardUserLinkRepository;
    private final DiaryRepository diaryRepository;

    public GuardHomeResponseDto getHomeData(User user) {
        User persistUser = userRepository
            .findById(user.getId()).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));

        checkUser(persistUser);
        String guardianUserName = persistUser.getUserProfile().getUsername();
        User ward = persistUser.getPrimaryWard();

        if (ward == null){
            return GuardHomeResponseDto.builder()
                .username(persistUser.getUserProfile().getUsername())
                .build();
        }




        //weeklyStamp 구하기
        LocalDate today = LocalDate.now();
        LocalDateTime startOfWeek = today.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY)).atStartOfDay();
        LocalDateTime endOfWeek = today.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY)).atTime(LocalTime.MAX);

        List<AbstractAudioMetadata> weeklyRecordings = audioMetadataRepository.findByUserAndCreatedAtBetween(ward, startOfWeek, endOfWeek);

        List<LocalDate> weeklyStamps = weeklyRecordings.stream()
                .map(metadata -> metadata.getCreatedAt().toLocalDate())
                .distinct()
                .sorted()
                .collect(Collectors.toList());

        //오늘 기록 구하기
        LocalDateTime startOfToday = today.atStartOfDay();         // 00:00:00
        LocalDateTime endOfToday = today.atTime(LocalTime.MAX);   // 23:59:59.999999999

        //
        List<Diary> wardDiaries = diaryRepository.findAllByAuthorIdOrderByCreatedAtDesc(ward.getId());

        List<DiaryInfoDto> diaryInfos = wardDiaries.stream()
            .map(DiaryInfoDto::fromEntity)
            .collect(Collectors.toList());

        return GuardHomeResponseDto.builder()
                .username(guardianUserName)
                .weeklyStamps(weeklyStamps)
                .consecutiveRecordingDays(ward.getConsecutiveRecordingDays())
                .wardUsername(ward.getUserProfile().getUsername())
                .diarys(diaryInfos)
                .build();
    }

    public GuardReportResponseDto getReport(User user) {
        User persistUser = userRepository
            .findById(user.getId()).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));

        checkUser(persistUser);

        User ward = persistUser.getPrimaryWard();

        //이번 주 출석횟수 구하기
        LocalDate today = LocalDate.now();
        LocalDateTime startOfWeek = today.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY)).atStartOfDay();
        LocalDateTime endOfWeek = today.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY)).atTime(LocalTime.MAX);

        List<AbstractAudioMetadata> weeklyRecordings = audioMetadataRepository.findByUserAndCreatedAtBetween(ward, startOfWeek, endOfWeek);

        long weeklyAttendanceCount = weeklyRecordings.stream()
                .map(metadata -> metadata.getCreatedAt().toLocalDate())
                .distinct()
                .count();

        return GuardReportResponseDto.builder()
                .weeklyAttendanceCount(weeklyAttendanceCount)
                .correctionCount(0)
                .build();
    }

    public GuardCalendarResponseDto getCalendar(User user) {
        User persistUser = userRepository
            .findById(user.getId()).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));

        checkUser(persistUser);

        User ward = persistUser.getPrimaryWard();

        //이번 주 출석횟수 구하기
        LocalDate today = LocalDate.now();
        LocalDateTime startOfMonth = today.withDayOfMonth(1).atStartOfDay();
        LocalDateTime endOfMonth = today.withDayOfMonth(today.lengthOfMonth()).atTime(LocalTime.MAX);

        List<AbstractAudioMetadata> monthlyRecordings = audioMetadataRepository.findByUserAndCreatedAtBetween(ward, startOfMonth, endOfMonth);

        long monthlyAttendanceCount = monthlyRecordings.stream()
                .map(metadata -> metadata.getCreatedAt().toLocalDate())
                .distinct()
                .count();

        List<LocalDate> monthlyAttendance = monthlyRecordings.stream()
                .map(metadata -> metadata.getCreatedAt().toLocalDate())
                .distinct()
                .sorted()
                .collect(Collectors.toList());

        return GuardCalendarResponseDto.builder()
                .monthlyAttendanceCount(monthlyAttendanceCount)
                .monthlyAttendance(monthlyAttendance)
                .build();
    }

    public List<GuardSettingResponseDto> getSettings(User user) {
        User persistUser = userRepository
            .findById(user.getId()).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));

        checkUser(persistUser);

        return persistUser.getWards().stream()
            .map(link -> GuardSettingResponseDto.fromEntity(link, persistUser))
            .collect(Collectors.toList());
    }

    //현재 모든 피보호자 + 다른 피보호자에게 받은 요청 + 보호자가 보낸 요청 모두 보여주기
    public GuardManagementResponseDto getManagement(User user) {
        User persistUser = userRepository
            .findById(user.getId()).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));

        checkUser(persistUser);
        return GuardManagementResponseDto.fromEntity(persistUser.getWards(), persistUser.getReceivedRequests(), persistUser.getSentRequests());
    }

    //피보호자 아이디로 검색
    public Optional<WardUserDto> getWard(String userId) {
        return userRepository.findByUserProfileUserId(userId)
            .filter(user -> user.getRoles().stream()
                .anyMatch(role -> role.getName().equals("ROLE_USER")))
                .map(ward -> WardUserDto.fromEntity(ward, false));
    }

    public void sendGuardRequest(User guard, GuardRequestDto guardRequestDto) {
        log.info("guardRequestDto: {}", guardRequestDto);
        User persistGuard = userRepository
            .findById(guard.getId()).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));

        checkUser(persistGuard);
        User persistWard = userRepository.findByUserProfileUserId(guardRequestDto.getReceiverUserId())
                .orElseThrow(() -> new IllegalArgumentException("요청 대상 피보호자를 찾을 수 없습니다."));

        GuardRequest guardRequest = GuardRequestDto.toEntity(persistGuard, persistWard);
        persistWard.getReceivedRequests().add(guardRequest);
        persistGuard.getSentRequests().add(guardRequest);

        guardRequestRepository.save(guardRequest);
    }

    public void updateRequestStatus(Long requestId, Status status) {
        GuardRequest request = guardRequestRepository.findGuardRequestById(requestId)
                .orElseThrow(() -> new IllegalArgumentException("요청을 찾을 수가 없습니다"));

        if (request.getStatus() != Status.PENDING) {
            throw new IllegalStateException("이미 처리된 요청입니다.");
        }

        User guard = request.getReceiver();
        User ward = request.getRequester();

        //요청이 거절되었을 떄
        if (status == Status.REJECTED) {
            guard.getReceivedRequests().remove(request);
            ward.getSentRequests().remove(request);
            guardRequestRepository.delete(request);
        }

        //요청 수락되었을 떄
        if (status == Status.ACCEPTED) {
            GuardUserLink guardUserLink = guard.addWard(ward);
            guardUserLinkRepository.save(guardUserLink);

            ward.getReceivedRequests().remove(request);
            guard.getSentRequests().remove(request);
            guardRequestRepository.delete(request);
        }
    }

    private static void checkUser(User user) {
        if (user.getId() == null) {
            throw new IllegalArgumentException("user id가 비어있습니다");
        }

        boolean isGuardian = user.getRoles().stream().anyMatch(role -> "ROLE_GUARD".equals(role.getName()));

        if (!isGuardian) {
            throw new IllegalArgumentException("보호자 권한이 없습니다");
        }
    }
}
</file>

<file path="src/main/java/com/example/memory_guard/audio/service/AudioService.java">
package com.example.memory_guard.audio.service;

import com.example.memory_guard.analysis.service.AudioAnalysisService;
import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.audio.domain.AudioTranscription;
import com.example.memory_guard.analysis.domain.AbstractOverallAnalysis;
import com.example.memory_guard.analysis.domain.DementiaAnalysis;
import com.example.memory_guard.analysis.domain.FeedbackType;
import com.example.memory_guard.audio.dto.response.AudioStampResponseDto;
import com.example.memory_guard.audio.dto.response.AudioAnalysisReport;
import com.example.memory_guard.audio.dto.response.AudioTranscriptionResponseDto;
import com.example.memory_guard.audio.dto.response.AudioSaveResultDto;
import com.example.memory_guard.audio.dto.response.SpeakSentenceResponseDto;
import com.example.memory_guard.audio.utils.AudioConversionUtils;
import com.example.memory_guard.audio.utils.AudioUtils;
import com.example.memory_guard.audio.repository.AudioMetadataRepository;
import com.example.memory_guard.audio.repository.AudioTranscriptionRepository;
import com.example.memory_guard.analysis.repository.OverallAnalysisRepository;
import com.example.memory_guard.diary.domain.Diary;
import com.example.memory_guard.diary.service.DiaryService;
import com.example.memory_guard.global.ai.AiModelClient;
import com.example.memory_guard.user.domain.User;
import com.example.memory_guard.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.temporal.TemporalAdjusters;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class AudioService {

  private final AudioStorageService audioStorageService;
  private final AudioAnalysisService audioEvaluationService;
  private final DiaryService diaryService;
  private final AiModelClient aiModelClient;

  private final AudioMetadataRepository audioMetadataRepository;
  private final AudioTranscriptionRepository audioTranscriptionRepository;
  private final OverallAnalysisRepository evaluationFeedbackRepository;
  private final UserRepository userRepository;
  private final AudioConversionUtils audioConversionUtils;

  @Value("${file.upload-dir}")
  private String uploadDir;

  public AbstractAudioMetadata getAudioMetadata(Long audioId) throws IOException {
    return audioStorageService.getFile(audioId);
  }

  public AbstractAudioMetadata getLatestAudioMetadata(User user) {
    return audioMetadataRepository.findTopByUserOrderByCreatedAtDesc(user)
        .orElseThrow(() -> new IllegalStateException("피보호자의 녹음 기록이 존재하지 않습니다."));
  }

  public AudioStampResponseDto getAudioStamps(User user) {
    LocalDate today = LocalDate.now();
    LocalDateTime startOfWeek = today.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY)).atStartOfDay();
    LocalDateTime endOfWeek = today.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY)).atTime(LocalTime.MAX);

    List<AbstractAudioMetadata> weeklyRecordings = audioMetadataRepository.findByUserAndCreatedAtBetween(user, startOfWeek, endOfWeek);

    List<LocalDate> weeklyStamps = weeklyRecordings.stream()
        .map(metadata -> metadata.getCreatedAt().toLocalDate())
        .distinct()
        .sorted()
        .collect(Collectors.toList());

    return AudioStampResponseDto.builder()
        .consecutiveRecordingDays(user.getConsecutiveRecordingDays())
        .weeklyStamps(weeklyStamps)
        .build();
  }

  public List<AbstractOverallAnalysis> evaluate(AbstractAudioMetadata abstractAudioMetadata, User user) throws IOException {
    return audioEvaluationService.evaluate(abstractAudioMetadata, user);
  }

  @Transactional
  public AudioSaveResultDto saveAudio(MultipartFile audioFile, User user) throws IOException, UnsupportedAudioFileException {
    User persistentUser = userRepository.findById(user.getId())
        .orElseThrow(() -> new IllegalArgumentException("사용자를 찾을 수 없습니다. ID: " + user.getId()));

    Path tempFilePath = Files.createTempFile("converted_", ".wav");
    File convertedWavFile = null;

    try {
      convertedWavFile = audioConversionUtils.convertToWav(audioFile, tempFilePath.toString());

      int audioTimeSeconds = AudioUtils.getAudioSecondTimeFromFile(convertedWavFile);

      AbstractAudioMetadata abstractAudioMetadata = audioStorageService.save(convertedWavFile, user);

      persistentUser.updateRecordingStreak();
      persistentUser.updateAvgRecordingTime(audioTimeSeconds);

      return AudioSaveResultDto.builder()
          .audioId(abstractAudioMetadata.getId())
          .user(persistentUser)
          .build();

    } finally {
      if (tempFilePath != null) {
        Files.deleteIfExists(tempFilePath);
      }
    }
  }

  @Transactional
  public void extractAudioText (Long audioId) throws IOException {
    AbstractAudioMetadata metadata = audioMetadataRepository
        .findById(audioId).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 audio입니다."));

    AudioTranscriptionResponseDto transcriptionResponseDto = aiModelClient.extractAudioText(metadata);
    log.info("AI 모델로부터 온 데이터: {}", transcriptionResponseDto.getAudioText());
    log.info("metadata: {}", metadata);

    AudioTranscription audioTranscription = AudioTranscription.builder()
        .audioMetadata(metadata)
        .text(transcriptionResponseDto.getAudioText())
        .build();

    audioTranscriptionRepository.save(audioTranscription);
    log.info("음성 저장 및 음성 TEXT를 추출하였습니다.");
  }


  @Transactional
  public void audioEvaluate(AbstractAudioMetadata metadata, User user) throws IOException {
    List<AbstractOverallAnalysis> audioFeedbacks = audioEvaluationService.evaluate(metadata, user);
    log.info("AUDIO SCORE: {}", audioFeedbacks.get(0).getScore());
    // DEMENTIA 타입의 피드백에서 score를 추출하여 사용자 평균 점수 업데이트
    audioFeedbacks.stream()
        .filter(feedback -> feedback.getFeedbackType() == FeedbackType.DEMENTIA)
        .findFirst()
        .ifPresent(feedback -> {
          User persistentUser = userRepository.findById(user.getId())
              .orElseThrow(() -> new IllegalArgumentException("사용자를 찾을 수 없습니다."));
          persistentUser.updateAvgScore(feedback.getScore());
        });
  }

  public AudioAnalysisReport audioEvaluateWardReport(AbstractAudioMetadata metadata, User user){
    List<AbstractOverallAnalysis> feedbacks = evaluationFeedbackRepository.findByAudioMetadataId(metadata.getId());

    User persistUser = userRepository.findById(user.getId())
        .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 User입니다."));

    
    DementiaAnalysis dementiaFeedback = feedbacks.stream()
        .filter(feedback -> feedback.getFeedbackType() == FeedbackType.DEMENTIA)
        .map(feedback -> (DementiaAnalysis) feedback)
        .findFirst()
        .orElseThrow(() -> new IllegalStateException("해당 음성에 대한 DEMENTIA 피드백을 찾을 수 없습니다."));
    
    AudioStampResponseDto audioStamps = getAudioStamps(persistUser);
    int attendanceRate = audioStamps.getWeeklyStamps().size();
    
    return createAudioEvaluationWardReport(persistUser, dementiaFeedback, attendanceRate);
  }

  public Diary getDairyByAudioId(Long audioId) {
    return diaryService.getDairyByAudioId(audioId);
  }

  public AudioTranscription getAudioTranscription(Long audioId) {
    return audioTranscriptionRepository.findByAudioMetadataId(audioId).orElseThrow(() -> new IllegalArgumentException("존재하지 않는 audio파일입니다."));
  }

  public SpeakSentenceResponseDto speakSentenceProcess(MultipartFile audioFile, String sentence) throws IOException {
    return aiModelClient.speakSentenceProcess(audioFile, sentence);
  }

  private static AudioAnalysisReport createAudioEvaluationWardReport(User user, DementiaAnalysis dementiaFeedback, int attendanceRate) {
    return AudioAnalysisReport.builder()
        .speakingRate(dementiaFeedback.getSpeakingRate())
        .utteranceVolume(dementiaFeedback.getUtteranceVolume())
        .avgSilenceDuration(dementiaFeedback.getAvgSilenceDuration())
        .vocabularyAccuracy(dementiaFeedback.getVocabularyAccuracy())
        .dementiaProbability(dementiaFeedback.getDementiaProbability())
        .repetitionRatio(dementiaFeedback.getRepetitionRatio())
        .fillerFrequency(dementiaFeedback.getFillerFrequency())
        .avgRecordingTime(user.getAvgRecordingTime())
        .attendanceRate(attendanceRate)
        .avgScore(user.getAvgScore())
        .build();
  }
}
</file>

<file path="src/main/java/com/example/memory_guard/user/domain/User.java">
package com.example.memory_guard.user.domain;

import com.example.memory_guard.audio.domain.AbstractAudioMetadata;
import com.example.memory_guard.diary.domain.Diary;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Entity
@Getter
@Setter  // 테스트를 위해 임시 설정
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@Table(name = "users")
public class User implements UserDetails {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Embedded
  private UserProfile userProfile;

  private int consecutiveRecordingDays = 0;

  private LocalDate lastRecordingDate;

  private double avgRecordingTime = 0.0;

  private double avgScore = 0.0;

  @ManyToMany(fetch = FetchType.EAGER)
  @JoinTable(
      name = "user_roles",
      joinColumns = @JoinColumn(name = "user_id"),
      inverseJoinColumns = @JoinColumn(name = "role_id")
  )
  private Set<Role> roles = new HashSet<>();

  @OneToMany(mappedBy = "guardian", cascade = CascadeType.PERSIST, orphanRemoval = true)
  private List<GuardUserLink> wards = new ArrayList<>();

  // OneToOne -> OneToMany 로 변경
  @OneToMany(mappedBy = "ward", cascade = CascadeType.PERSIST, orphanRemoval = true)
  private List<GuardUserLink> guardians = new ArrayList<>();

  //추가
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "primary_ward_id")
  private User primaryWard;

  //추가
  @OneToMany(mappedBy = "requester")
  private List<GuardRequest> sentRequests = new ArrayList<>();

  //추가
  @OneToMany(mappedBy = "receiver")
  private List<GuardRequest> receivedRequests = new ArrayList<>();


  @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<AbstractAudioMetadata> audioMetadataList = new ArrayList<>();

  @OneToMany(mappedBy = "author", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<Diary> diaries = new ArrayList<>();

  @Builder
  public User(UserProfile userProfile) {
    this.userProfile = userProfile;
  }

  public void addRole(Role role) {
    this.roles.add(role);
  }

  public GuardUserLink addWard(User ward){
    boolean isFirstWard = this.getWards().isEmpty();

    GuardUserLink guardUserLink = new GuardUserLink(this, ward);
    this.wards.add(guardUserLink);
    ward.getGuardians().add(guardUserLink);

    if (isFirstWard) {
      this.setPrimaryWard(ward);
    }

    return guardUserLink;
  }

  public GuardUserLink addGuardian(User guard) {
    GuardUserLink guardUserLink = new GuardUserLink(guard, this);
    this.guardians.add(guardUserLink);
    guard.addWard(guardUserLink.getWard());
    return guardUserLink;
  }

  public void setPrimaryWard(User ward) {
    boolean exists = wards.stream().anyMatch(link -> link.getWard().equals(ward));
    if (!exists) {
      throw new IllegalArgumentException("이 피보호자는 연결되어 있지 않습니다.");
    }
    this.primaryWard = ward;
  }

  public void updateRecordingStreak() {
    LocalDate today = LocalDate.now();

    if (today.equals(this.lastRecordingDate)) {
      return;
    }

    if (today.minusDays(1).equals(this.lastRecordingDate)) {
      this.consecutiveRecordingDays++;
    } else {
      this.consecutiveRecordingDays = 1;
    }

    this.lastRecordingDate = today;
  }

  public void addAudioMetadata(AbstractAudioMetadata audioMetadata) {
    this.audioMetadataList.add(audioMetadata);
  }

  public void updateAvgRecordingTime(int newRecordingTimeSeconds) {
    int totalRecordings = this.audioMetadataList.size();
    if (totalRecordings == 1) {
      this.avgRecordingTime = newRecordingTimeSeconds;
    } else {
      this.avgRecordingTime = ((this.avgRecordingTime * (totalRecordings - 1)) + newRecordingTimeSeconds) / totalRecordings;
    }
  }

  public void updateAvgScore(double newScore) {
    int totalEvaluations = this.audioMetadataList.size();
    if (totalEvaluations == 1) {
      this.avgScore = newScore;
    } else {
      this.avgScore = ((this.avgScore * (totalEvaluations - 1)) + newScore) / totalEvaluations;
    }
  }

  @Override
  public Collection<? extends GrantedAuthority> getAuthorities() {
    return this.roles.stream()
        .map(role -> new SimpleGrantedAuthority(role.getName()))
        .collect(Collectors.toList());
  }

  @Override
  public String getPassword() {
    return this.userProfile.getPassword();
  }

  @Override
  public String getUsername() {
    return this.userProfile.getUserId();
  }
}
</file>

</files>
